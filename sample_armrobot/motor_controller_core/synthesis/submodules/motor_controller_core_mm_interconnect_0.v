// motor_controller_core_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 200 at 2014.08.30.05:45:28

`timescale 1 ps / 1 ps
module motor_controller_core_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                    //                                  clk_0_clk.clk
		input  wire        peridot_bridge_reset_reset_bridge_in_reset_reset, // peridot_bridge_reset_reset_bridge_in_reset.reset
		input  wire [31:0] peridot_bridge_avalon_master_address,             //               peridot_bridge_avalon_master.address
		output wire        peridot_bridge_avalon_master_waitrequest,         //                                           .waitrequest
		input  wire [3:0]  peridot_bridge_avalon_master_byteenable,          //                                           .byteenable
		input  wire        peridot_bridge_avalon_master_read,                //                                           .read
		output wire [31:0] peridot_bridge_avalon_master_readdata,            //                                           .readdata
		output wire        peridot_bridge_avalon_master_readdatavalid,       //                                           .readdatavalid
		input  wire        peridot_bridge_avalon_master_write,               //                                           .write
		input  wire [31:0] peridot_bridge_avalon_master_writedata,           //                                           .writedata
		output wire [1:0]  motor_ch1_s1_address,                             //                               motor_ch1_s1.address
		output wire        motor_ch1_s1_write,                               //                                           .write
		input  wire [31:0] motor_ch1_s1_readdata,                            //                                           .readdata
		output wire [31:0] motor_ch1_s1_writedata,                           //                                           .writedata
		output wire        motor_ch1_s1_chipselect,                          //                                           .chipselect
		output wire [1:0]  motor_ch2_s1_address,                             //                               motor_ch2_s1.address
		output wire        motor_ch2_s1_write,                               //                                           .write
		input  wire [31:0] motor_ch2_s1_readdata,                            //                                           .readdata
		output wire [31:0] motor_ch2_s1_writedata,                           //                                           .writedata
		output wire        motor_ch2_s1_chipselect,                          //                                           .chipselect
		output wire [1:0]  motor_ch3_s1_address,                             //                               motor_ch3_s1.address
		output wire        motor_ch3_s1_write,                               //                                           .write
		input  wire [31:0] motor_ch3_s1_readdata,                            //                                           .readdata
		output wire [31:0] motor_ch3_s1_writedata,                           //                                           .writedata
		output wire        motor_ch3_s1_chipselect,                          //                                           .chipselect
		output wire [1:0]  motor_ch4_s1_address,                             //                               motor_ch4_s1.address
		output wire        motor_ch4_s1_write,                               //                                           .write
		input  wire [31:0] motor_ch4_s1_readdata,                            //                                           .readdata
		output wire [31:0] motor_ch4_s1_writedata,                           //                                           .writedata
		output wire        motor_ch4_s1_chipselect,                          //                                           .chipselect
		output wire [1:0]  motor_ch5_s1_address,                             //                               motor_ch5_s1.address
		output wire        motor_ch5_s1_write,                               //                                           .write
		input  wire [31:0] motor_ch5_s1_readdata,                            //                                           .readdata
		output wire [31:0] motor_ch5_s1_writedata,                           //                                           .writedata
		output wire        motor_ch5_s1_chipselect,                          //                                           .chipselect
		output wire [1:0]  pwmled_s1_address,                                //                                  pwmled_s1.address
		output wire        pwmled_s1_write,                                  //                                           .write
		input  wire [31:0] pwmled_s1_readdata,                               //                                           .readdata
		output wire [31:0] pwmled_s1_writedata,                              //                                           .writedata
		output wire        pwmled_s1_chipselect,                             //                                           .chipselect
		output wire [0:0]  sysid_control_slave_address,                      //                        sysid_control_slave.address
		input  wire [31:0] sysid_control_slave_readdata,                     //                                           .readdata
		output wire [1:0]  sysled_s1_address,                                //                                  sysled_s1.address
		output wire        sysled_s1_write,                                  //                                           .write
		input  wire [31:0] sysled_s1_readdata,                               //                                           .readdata
		output wire [31:0] sysled_s1_writedata,                              //                                           .writedata
		output wire        sysled_s1_chipselect                              //                                           .chipselect
	);

	wire          peridot_bridge_avalon_master_translator_avalon_universal_master_0_waitrequest;   // peridot_bridge_avalon_master_agent:av_waitrequest -> peridot_bridge_avalon_master_translator:uav_waitrequest
	wire    [2:0] peridot_bridge_avalon_master_translator_avalon_universal_master_0_burstcount;    // peridot_bridge_avalon_master_translator:uav_burstcount -> peridot_bridge_avalon_master_agent:av_burstcount
	wire   [31:0] peridot_bridge_avalon_master_translator_avalon_universal_master_0_writedata;     // peridot_bridge_avalon_master_translator:uav_writedata -> peridot_bridge_avalon_master_agent:av_writedata
	wire   [31:0] peridot_bridge_avalon_master_translator_avalon_universal_master_0_address;       // peridot_bridge_avalon_master_translator:uav_address -> peridot_bridge_avalon_master_agent:av_address
	wire          peridot_bridge_avalon_master_translator_avalon_universal_master_0_lock;          // peridot_bridge_avalon_master_translator:uav_lock -> peridot_bridge_avalon_master_agent:av_lock
	wire          peridot_bridge_avalon_master_translator_avalon_universal_master_0_write;         // peridot_bridge_avalon_master_translator:uav_write -> peridot_bridge_avalon_master_agent:av_write
	wire          peridot_bridge_avalon_master_translator_avalon_universal_master_0_read;          // peridot_bridge_avalon_master_translator:uav_read -> peridot_bridge_avalon_master_agent:av_read
	wire   [31:0] peridot_bridge_avalon_master_translator_avalon_universal_master_0_readdata;      // peridot_bridge_avalon_master_agent:av_readdata -> peridot_bridge_avalon_master_translator:uav_readdata
	wire          peridot_bridge_avalon_master_translator_avalon_universal_master_0_debugaccess;   // peridot_bridge_avalon_master_translator:uav_debugaccess -> peridot_bridge_avalon_master_agent:av_debugaccess
	wire    [3:0] peridot_bridge_avalon_master_translator_avalon_universal_master_0_byteenable;    // peridot_bridge_avalon_master_translator:uav_byteenable -> peridot_bridge_avalon_master_agent:av_byteenable
	wire          peridot_bridge_avalon_master_translator_avalon_universal_master_0_readdatavalid; // peridot_bridge_avalon_master_agent:av_readdatavalid -> peridot_bridge_avalon_master_translator:uav_readdatavalid
	wire          motor_ch1_s1_agent_m0_waitrequest;                                               // motor_ch1_s1_translator:uav_waitrequest -> motor_ch1_s1_agent:m0_waitrequest
	wire    [2:0] motor_ch1_s1_agent_m0_burstcount;                                                // motor_ch1_s1_agent:m0_burstcount -> motor_ch1_s1_translator:uav_burstcount
	wire   [31:0] motor_ch1_s1_agent_m0_writedata;                                                 // motor_ch1_s1_agent:m0_writedata -> motor_ch1_s1_translator:uav_writedata
	wire   [31:0] motor_ch1_s1_agent_m0_address;                                                   // motor_ch1_s1_agent:m0_address -> motor_ch1_s1_translator:uav_address
	wire          motor_ch1_s1_agent_m0_write;                                                     // motor_ch1_s1_agent:m0_write -> motor_ch1_s1_translator:uav_write
	wire          motor_ch1_s1_agent_m0_lock;                                                      // motor_ch1_s1_agent:m0_lock -> motor_ch1_s1_translator:uav_lock
	wire          motor_ch1_s1_agent_m0_read;                                                      // motor_ch1_s1_agent:m0_read -> motor_ch1_s1_translator:uav_read
	wire   [31:0] motor_ch1_s1_agent_m0_readdata;                                                  // motor_ch1_s1_translator:uav_readdata -> motor_ch1_s1_agent:m0_readdata
	wire          motor_ch1_s1_agent_m0_readdatavalid;                                             // motor_ch1_s1_translator:uav_readdatavalid -> motor_ch1_s1_agent:m0_readdatavalid
	wire          motor_ch1_s1_agent_m0_debugaccess;                                               // motor_ch1_s1_agent:m0_debugaccess -> motor_ch1_s1_translator:uav_debugaccess
	wire    [3:0] motor_ch1_s1_agent_m0_byteenable;                                                // motor_ch1_s1_agent:m0_byteenable -> motor_ch1_s1_translator:uav_byteenable
	wire          motor_ch1_s1_agent_rf_source_endofpacket;                                        // motor_ch1_s1_agent:rf_source_endofpacket -> motor_ch1_s1_agent_rsp_fifo:in_endofpacket
	wire          motor_ch1_s1_agent_rf_source_valid;                                              // motor_ch1_s1_agent:rf_source_valid -> motor_ch1_s1_agent_rsp_fifo:in_valid
	wire          motor_ch1_s1_agent_rf_source_startofpacket;                                      // motor_ch1_s1_agent:rf_source_startofpacket -> motor_ch1_s1_agent_rsp_fifo:in_startofpacket
	wire  [106:0] motor_ch1_s1_agent_rf_source_data;                                               // motor_ch1_s1_agent:rf_source_data -> motor_ch1_s1_agent_rsp_fifo:in_data
	wire          motor_ch1_s1_agent_rf_source_ready;                                              // motor_ch1_s1_agent_rsp_fifo:in_ready -> motor_ch1_s1_agent:rf_source_ready
	wire          motor_ch1_s1_agent_rsp_fifo_out_endofpacket;                                     // motor_ch1_s1_agent_rsp_fifo:out_endofpacket -> motor_ch1_s1_agent:rf_sink_endofpacket
	wire          motor_ch1_s1_agent_rsp_fifo_out_valid;                                           // motor_ch1_s1_agent_rsp_fifo:out_valid -> motor_ch1_s1_agent:rf_sink_valid
	wire          motor_ch1_s1_agent_rsp_fifo_out_startofpacket;                                   // motor_ch1_s1_agent_rsp_fifo:out_startofpacket -> motor_ch1_s1_agent:rf_sink_startofpacket
	wire  [106:0] motor_ch1_s1_agent_rsp_fifo_out_data;                                            // motor_ch1_s1_agent_rsp_fifo:out_data -> motor_ch1_s1_agent:rf_sink_data
	wire          motor_ch1_s1_agent_rsp_fifo_out_ready;                                           // motor_ch1_s1_agent:rf_sink_ready -> motor_ch1_s1_agent_rsp_fifo:out_ready
	wire          motor_ch1_s1_agent_rdata_fifo_src_valid;                                         // motor_ch1_s1_agent:rdata_fifo_src_valid -> motor_ch1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] motor_ch1_s1_agent_rdata_fifo_src_data;                                          // motor_ch1_s1_agent:rdata_fifo_src_data -> motor_ch1_s1_agent:rdata_fifo_sink_data
	wire          motor_ch1_s1_agent_rdata_fifo_src_ready;                                         // motor_ch1_s1_agent:rdata_fifo_sink_ready -> motor_ch1_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_endofpacket;                                                         // cmd_mux:src_endofpacket -> motor_ch1_s1_agent:cp_endofpacket
	wire          cmd_mux_src_valid;                                                               // cmd_mux:src_valid -> motor_ch1_s1_agent:cp_valid
	wire          cmd_mux_src_startofpacket;                                                       // cmd_mux:src_startofpacket -> motor_ch1_s1_agent:cp_startofpacket
	wire  [105:0] cmd_mux_src_data;                                                                // cmd_mux:src_data -> motor_ch1_s1_agent:cp_data
	wire    [7:0] cmd_mux_src_channel;                                                             // cmd_mux:src_channel -> motor_ch1_s1_agent:cp_channel
	wire          cmd_mux_src_ready;                                                               // motor_ch1_s1_agent:cp_ready -> cmd_mux:src_ready
	wire          motor_ch2_s1_agent_m0_waitrequest;                                               // motor_ch2_s1_translator:uav_waitrequest -> motor_ch2_s1_agent:m0_waitrequest
	wire    [2:0] motor_ch2_s1_agent_m0_burstcount;                                                // motor_ch2_s1_agent:m0_burstcount -> motor_ch2_s1_translator:uav_burstcount
	wire   [31:0] motor_ch2_s1_agent_m0_writedata;                                                 // motor_ch2_s1_agent:m0_writedata -> motor_ch2_s1_translator:uav_writedata
	wire   [31:0] motor_ch2_s1_agent_m0_address;                                                   // motor_ch2_s1_agent:m0_address -> motor_ch2_s1_translator:uav_address
	wire          motor_ch2_s1_agent_m0_write;                                                     // motor_ch2_s1_agent:m0_write -> motor_ch2_s1_translator:uav_write
	wire          motor_ch2_s1_agent_m0_lock;                                                      // motor_ch2_s1_agent:m0_lock -> motor_ch2_s1_translator:uav_lock
	wire          motor_ch2_s1_agent_m0_read;                                                      // motor_ch2_s1_agent:m0_read -> motor_ch2_s1_translator:uav_read
	wire   [31:0] motor_ch2_s1_agent_m0_readdata;                                                  // motor_ch2_s1_translator:uav_readdata -> motor_ch2_s1_agent:m0_readdata
	wire          motor_ch2_s1_agent_m0_readdatavalid;                                             // motor_ch2_s1_translator:uav_readdatavalid -> motor_ch2_s1_agent:m0_readdatavalid
	wire          motor_ch2_s1_agent_m0_debugaccess;                                               // motor_ch2_s1_agent:m0_debugaccess -> motor_ch2_s1_translator:uav_debugaccess
	wire    [3:0] motor_ch2_s1_agent_m0_byteenable;                                                // motor_ch2_s1_agent:m0_byteenable -> motor_ch2_s1_translator:uav_byteenable
	wire          motor_ch2_s1_agent_rf_source_endofpacket;                                        // motor_ch2_s1_agent:rf_source_endofpacket -> motor_ch2_s1_agent_rsp_fifo:in_endofpacket
	wire          motor_ch2_s1_agent_rf_source_valid;                                              // motor_ch2_s1_agent:rf_source_valid -> motor_ch2_s1_agent_rsp_fifo:in_valid
	wire          motor_ch2_s1_agent_rf_source_startofpacket;                                      // motor_ch2_s1_agent:rf_source_startofpacket -> motor_ch2_s1_agent_rsp_fifo:in_startofpacket
	wire  [106:0] motor_ch2_s1_agent_rf_source_data;                                               // motor_ch2_s1_agent:rf_source_data -> motor_ch2_s1_agent_rsp_fifo:in_data
	wire          motor_ch2_s1_agent_rf_source_ready;                                              // motor_ch2_s1_agent_rsp_fifo:in_ready -> motor_ch2_s1_agent:rf_source_ready
	wire          motor_ch2_s1_agent_rsp_fifo_out_endofpacket;                                     // motor_ch2_s1_agent_rsp_fifo:out_endofpacket -> motor_ch2_s1_agent:rf_sink_endofpacket
	wire          motor_ch2_s1_agent_rsp_fifo_out_valid;                                           // motor_ch2_s1_agent_rsp_fifo:out_valid -> motor_ch2_s1_agent:rf_sink_valid
	wire          motor_ch2_s1_agent_rsp_fifo_out_startofpacket;                                   // motor_ch2_s1_agent_rsp_fifo:out_startofpacket -> motor_ch2_s1_agent:rf_sink_startofpacket
	wire  [106:0] motor_ch2_s1_agent_rsp_fifo_out_data;                                            // motor_ch2_s1_agent_rsp_fifo:out_data -> motor_ch2_s1_agent:rf_sink_data
	wire          motor_ch2_s1_agent_rsp_fifo_out_ready;                                           // motor_ch2_s1_agent:rf_sink_ready -> motor_ch2_s1_agent_rsp_fifo:out_ready
	wire          motor_ch2_s1_agent_rdata_fifo_src_valid;                                         // motor_ch2_s1_agent:rdata_fifo_src_valid -> motor_ch2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] motor_ch2_s1_agent_rdata_fifo_src_data;                                          // motor_ch2_s1_agent:rdata_fifo_src_data -> motor_ch2_s1_agent:rdata_fifo_sink_data
	wire          motor_ch2_s1_agent_rdata_fifo_src_ready;                                         // motor_ch2_s1_agent:rdata_fifo_sink_ready -> motor_ch2_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_endofpacket;                                                     // cmd_mux_001:src_endofpacket -> motor_ch2_s1_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                           // cmd_mux_001:src_valid -> motor_ch2_s1_agent:cp_valid
	wire          cmd_mux_001_src_startofpacket;                                                   // cmd_mux_001:src_startofpacket -> motor_ch2_s1_agent:cp_startofpacket
	wire  [105:0] cmd_mux_001_src_data;                                                            // cmd_mux_001:src_data -> motor_ch2_s1_agent:cp_data
	wire    [7:0] cmd_mux_001_src_channel;                                                         // cmd_mux_001:src_channel -> motor_ch2_s1_agent:cp_channel
	wire          cmd_mux_001_src_ready;                                                           // motor_ch2_s1_agent:cp_ready -> cmd_mux_001:src_ready
	wire          motor_ch3_s1_agent_m0_waitrequest;                                               // motor_ch3_s1_translator:uav_waitrequest -> motor_ch3_s1_agent:m0_waitrequest
	wire    [2:0] motor_ch3_s1_agent_m0_burstcount;                                                // motor_ch3_s1_agent:m0_burstcount -> motor_ch3_s1_translator:uav_burstcount
	wire   [31:0] motor_ch3_s1_agent_m0_writedata;                                                 // motor_ch3_s1_agent:m0_writedata -> motor_ch3_s1_translator:uav_writedata
	wire   [31:0] motor_ch3_s1_agent_m0_address;                                                   // motor_ch3_s1_agent:m0_address -> motor_ch3_s1_translator:uav_address
	wire          motor_ch3_s1_agent_m0_write;                                                     // motor_ch3_s1_agent:m0_write -> motor_ch3_s1_translator:uav_write
	wire          motor_ch3_s1_agent_m0_lock;                                                      // motor_ch3_s1_agent:m0_lock -> motor_ch3_s1_translator:uav_lock
	wire          motor_ch3_s1_agent_m0_read;                                                      // motor_ch3_s1_agent:m0_read -> motor_ch3_s1_translator:uav_read
	wire   [31:0] motor_ch3_s1_agent_m0_readdata;                                                  // motor_ch3_s1_translator:uav_readdata -> motor_ch3_s1_agent:m0_readdata
	wire          motor_ch3_s1_agent_m0_readdatavalid;                                             // motor_ch3_s1_translator:uav_readdatavalid -> motor_ch3_s1_agent:m0_readdatavalid
	wire          motor_ch3_s1_agent_m0_debugaccess;                                               // motor_ch3_s1_agent:m0_debugaccess -> motor_ch3_s1_translator:uav_debugaccess
	wire    [3:0] motor_ch3_s1_agent_m0_byteenable;                                                // motor_ch3_s1_agent:m0_byteenable -> motor_ch3_s1_translator:uav_byteenable
	wire          motor_ch3_s1_agent_rf_source_endofpacket;                                        // motor_ch3_s1_agent:rf_source_endofpacket -> motor_ch3_s1_agent_rsp_fifo:in_endofpacket
	wire          motor_ch3_s1_agent_rf_source_valid;                                              // motor_ch3_s1_agent:rf_source_valid -> motor_ch3_s1_agent_rsp_fifo:in_valid
	wire          motor_ch3_s1_agent_rf_source_startofpacket;                                      // motor_ch3_s1_agent:rf_source_startofpacket -> motor_ch3_s1_agent_rsp_fifo:in_startofpacket
	wire  [106:0] motor_ch3_s1_agent_rf_source_data;                                               // motor_ch3_s1_agent:rf_source_data -> motor_ch3_s1_agent_rsp_fifo:in_data
	wire          motor_ch3_s1_agent_rf_source_ready;                                              // motor_ch3_s1_agent_rsp_fifo:in_ready -> motor_ch3_s1_agent:rf_source_ready
	wire          motor_ch3_s1_agent_rsp_fifo_out_endofpacket;                                     // motor_ch3_s1_agent_rsp_fifo:out_endofpacket -> motor_ch3_s1_agent:rf_sink_endofpacket
	wire          motor_ch3_s1_agent_rsp_fifo_out_valid;                                           // motor_ch3_s1_agent_rsp_fifo:out_valid -> motor_ch3_s1_agent:rf_sink_valid
	wire          motor_ch3_s1_agent_rsp_fifo_out_startofpacket;                                   // motor_ch3_s1_agent_rsp_fifo:out_startofpacket -> motor_ch3_s1_agent:rf_sink_startofpacket
	wire  [106:0] motor_ch3_s1_agent_rsp_fifo_out_data;                                            // motor_ch3_s1_agent_rsp_fifo:out_data -> motor_ch3_s1_agent:rf_sink_data
	wire          motor_ch3_s1_agent_rsp_fifo_out_ready;                                           // motor_ch3_s1_agent:rf_sink_ready -> motor_ch3_s1_agent_rsp_fifo:out_ready
	wire          motor_ch3_s1_agent_rdata_fifo_src_valid;                                         // motor_ch3_s1_agent:rdata_fifo_src_valid -> motor_ch3_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] motor_ch3_s1_agent_rdata_fifo_src_data;                                          // motor_ch3_s1_agent:rdata_fifo_src_data -> motor_ch3_s1_agent:rdata_fifo_sink_data
	wire          motor_ch3_s1_agent_rdata_fifo_src_ready;                                         // motor_ch3_s1_agent:rdata_fifo_sink_ready -> motor_ch3_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_endofpacket;                                                     // cmd_mux_002:src_endofpacket -> motor_ch3_s1_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                           // cmd_mux_002:src_valid -> motor_ch3_s1_agent:cp_valid
	wire          cmd_mux_002_src_startofpacket;                                                   // cmd_mux_002:src_startofpacket -> motor_ch3_s1_agent:cp_startofpacket
	wire  [105:0] cmd_mux_002_src_data;                                                            // cmd_mux_002:src_data -> motor_ch3_s1_agent:cp_data
	wire    [7:0] cmd_mux_002_src_channel;                                                         // cmd_mux_002:src_channel -> motor_ch3_s1_agent:cp_channel
	wire          cmd_mux_002_src_ready;                                                           // motor_ch3_s1_agent:cp_ready -> cmd_mux_002:src_ready
	wire          motor_ch4_s1_agent_m0_waitrequest;                                               // motor_ch4_s1_translator:uav_waitrequest -> motor_ch4_s1_agent:m0_waitrequest
	wire    [2:0] motor_ch4_s1_agent_m0_burstcount;                                                // motor_ch4_s1_agent:m0_burstcount -> motor_ch4_s1_translator:uav_burstcount
	wire   [31:0] motor_ch4_s1_agent_m0_writedata;                                                 // motor_ch4_s1_agent:m0_writedata -> motor_ch4_s1_translator:uav_writedata
	wire   [31:0] motor_ch4_s1_agent_m0_address;                                                   // motor_ch4_s1_agent:m0_address -> motor_ch4_s1_translator:uav_address
	wire          motor_ch4_s1_agent_m0_write;                                                     // motor_ch4_s1_agent:m0_write -> motor_ch4_s1_translator:uav_write
	wire          motor_ch4_s1_agent_m0_lock;                                                      // motor_ch4_s1_agent:m0_lock -> motor_ch4_s1_translator:uav_lock
	wire          motor_ch4_s1_agent_m0_read;                                                      // motor_ch4_s1_agent:m0_read -> motor_ch4_s1_translator:uav_read
	wire   [31:0] motor_ch4_s1_agent_m0_readdata;                                                  // motor_ch4_s1_translator:uav_readdata -> motor_ch4_s1_agent:m0_readdata
	wire          motor_ch4_s1_agent_m0_readdatavalid;                                             // motor_ch4_s1_translator:uav_readdatavalid -> motor_ch4_s1_agent:m0_readdatavalid
	wire          motor_ch4_s1_agent_m0_debugaccess;                                               // motor_ch4_s1_agent:m0_debugaccess -> motor_ch4_s1_translator:uav_debugaccess
	wire    [3:0] motor_ch4_s1_agent_m0_byteenable;                                                // motor_ch4_s1_agent:m0_byteenable -> motor_ch4_s1_translator:uav_byteenable
	wire          motor_ch4_s1_agent_rf_source_endofpacket;                                        // motor_ch4_s1_agent:rf_source_endofpacket -> motor_ch4_s1_agent_rsp_fifo:in_endofpacket
	wire          motor_ch4_s1_agent_rf_source_valid;                                              // motor_ch4_s1_agent:rf_source_valid -> motor_ch4_s1_agent_rsp_fifo:in_valid
	wire          motor_ch4_s1_agent_rf_source_startofpacket;                                      // motor_ch4_s1_agent:rf_source_startofpacket -> motor_ch4_s1_agent_rsp_fifo:in_startofpacket
	wire  [106:0] motor_ch4_s1_agent_rf_source_data;                                               // motor_ch4_s1_agent:rf_source_data -> motor_ch4_s1_agent_rsp_fifo:in_data
	wire          motor_ch4_s1_agent_rf_source_ready;                                              // motor_ch4_s1_agent_rsp_fifo:in_ready -> motor_ch4_s1_agent:rf_source_ready
	wire          motor_ch4_s1_agent_rsp_fifo_out_endofpacket;                                     // motor_ch4_s1_agent_rsp_fifo:out_endofpacket -> motor_ch4_s1_agent:rf_sink_endofpacket
	wire          motor_ch4_s1_agent_rsp_fifo_out_valid;                                           // motor_ch4_s1_agent_rsp_fifo:out_valid -> motor_ch4_s1_agent:rf_sink_valid
	wire          motor_ch4_s1_agent_rsp_fifo_out_startofpacket;                                   // motor_ch4_s1_agent_rsp_fifo:out_startofpacket -> motor_ch4_s1_agent:rf_sink_startofpacket
	wire  [106:0] motor_ch4_s1_agent_rsp_fifo_out_data;                                            // motor_ch4_s1_agent_rsp_fifo:out_data -> motor_ch4_s1_agent:rf_sink_data
	wire          motor_ch4_s1_agent_rsp_fifo_out_ready;                                           // motor_ch4_s1_agent:rf_sink_ready -> motor_ch4_s1_agent_rsp_fifo:out_ready
	wire          motor_ch4_s1_agent_rdata_fifo_src_valid;                                         // motor_ch4_s1_agent:rdata_fifo_src_valid -> motor_ch4_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] motor_ch4_s1_agent_rdata_fifo_src_data;                                          // motor_ch4_s1_agent:rdata_fifo_src_data -> motor_ch4_s1_agent:rdata_fifo_sink_data
	wire          motor_ch4_s1_agent_rdata_fifo_src_ready;                                         // motor_ch4_s1_agent:rdata_fifo_sink_ready -> motor_ch4_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_003_src_endofpacket;                                                     // cmd_mux_003:src_endofpacket -> motor_ch4_s1_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                           // cmd_mux_003:src_valid -> motor_ch4_s1_agent:cp_valid
	wire          cmd_mux_003_src_startofpacket;                                                   // cmd_mux_003:src_startofpacket -> motor_ch4_s1_agent:cp_startofpacket
	wire  [105:0] cmd_mux_003_src_data;                                                            // cmd_mux_003:src_data -> motor_ch4_s1_agent:cp_data
	wire    [7:0] cmd_mux_003_src_channel;                                                         // cmd_mux_003:src_channel -> motor_ch4_s1_agent:cp_channel
	wire          cmd_mux_003_src_ready;                                                           // motor_ch4_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire          motor_ch5_s1_agent_m0_waitrequest;                                               // motor_ch5_s1_translator:uav_waitrequest -> motor_ch5_s1_agent:m0_waitrequest
	wire    [2:0] motor_ch5_s1_agent_m0_burstcount;                                                // motor_ch5_s1_agent:m0_burstcount -> motor_ch5_s1_translator:uav_burstcount
	wire   [31:0] motor_ch5_s1_agent_m0_writedata;                                                 // motor_ch5_s1_agent:m0_writedata -> motor_ch5_s1_translator:uav_writedata
	wire   [31:0] motor_ch5_s1_agent_m0_address;                                                   // motor_ch5_s1_agent:m0_address -> motor_ch5_s1_translator:uav_address
	wire          motor_ch5_s1_agent_m0_write;                                                     // motor_ch5_s1_agent:m0_write -> motor_ch5_s1_translator:uav_write
	wire          motor_ch5_s1_agent_m0_lock;                                                      // motor_ch5_s1_agent:m0_lock -> motor_ch5_s1_translator:uav_lock
	wire          motor_ch5_s1_agent_m0_read;                                                      // motor_ch5_s1_agent:m0_read -> motor_ch5_s1_translator:uav_read
	wire   [31:0] motor_ch5_s1_agent_m0_readdata;                                                  // motor_ch5_s1_translator:uav_readdata -> motor_ch5_s1_agent:m0_readdata
	wire          motor_ch5_s1_agent_m0_readdatavalid;                                             // motor_ch5_s1_translator:uav_readdatavalid -> motor_ch5_s1_agent:m0_readdatavalid
	wire          motor_ch5_s1_agent_m0_debugaccess;                                               // motor_ch5_s1_agent:m0_debugaccess -> motor_ch5_s1_translator:uav_debugaccess
	wire    [3:0] motor_ch5_s1_agent_m0_byteenable;                                                // motor_ch5_s1_agent:m0_byteenable -> motor_ch5_s1_translator:uav_byteenable
	wire          motor_ch5_s1_agent_rf_source_endofpacket;                                        // motor_ch5_s1_agent:rf_source_endofpacket -> motor_ch5_s1_agent_rsp_fifo:in_endofpacket
	wire          motor_ch5_s1_agent_rf_source_valid;                                              // motor_ch5_s1_agent:rf_source_valid -> motor_ch5_s1_agent_rsp_fifo:in_valid
	wire          motor_ch5_s1_agent_rf_source_startofpacket;                                      // motor_ch5_s1_agent:rf_source_startofpacket -> motor_ch5_s1_agent_rsp_fifo:in_startofpacket
	wire  [106:0] motor_ch5_s1_agent_rf_source_data;                                               // motor_ch5_s1_agent:rf_source_data -> motor_ch5_s1_agent_rsp_fifo:in_data
	wire          motor_ch5_s1_agent_rf_source_ready;                                              // motor_ch5_s1_agent_rsp_fifo:in_ready -> motor_ch5_s1_agent:rf_source_ready
	wire          motor_ch5_s1_agent_rsp_fifo_out_endofpacket;                                     // motor_ch5_s1_agent_rsp_fifo:out_endofpacket -> motor_ch5_s1_agent:rf_sink_endofpacket
	wire          motor_ch5_s1_agent_rsp_fifo_out_valid;                                           // motor_ch5_s1_agent_rsp_fifo:out_valid -> motor_ch5_s1_agent:rf_sink_valid
	wire          motor_ch5_s1_agent_rsp_fifo_out_startofpacket;                                   // motor_ch5_s1_agent_rsp_fifo:out_startofpacket -> motor_ch5_s1_agent:rf_sink_startofpacket
	wire  [106:0] motor_ch5_s1_agent_rsp_fifo_out_data;                                            // motor_ch5_s1_agent_rsp_fifo:out_data -> motor_ch5_s1_agent:rf_sink_data
	wire          motor_ch5_s1_agent_rsp_fifo_out_ready;                                           // motor_ch5_s1_agent:rf_sink_ready -> motor_ch5_s1_agent_rsp_fifo:out_ready
	wire          motor_ch5_s1_agent_rdata_fifo_src_valid;                                         // motor_ch5_s1_agent:rdata_fifo_src_valid -> motor_ch5_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] motor_ch5_s1_agent_rdata_fifo_src_data;                                          // motor_ch5_s1_agent:rdata_fifo_src_data -> motor_ch5_s1_agent:rdata_fifo_sink_data
	wire          motor_ch5_s1_agent_rdata_fifo_src_ready;                                         // motor_ch5_s1_agent:rdata_fifo_sink_ready -> motor_ch5_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_004_src_endofpacket;                                                     // cmd_mux_004:src_endofpacket -> motor_ch5_s1_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                           // cmd_mux_004:src_valid -> motor_ch5_s1_agent:cp_valid
	wire          cmd_mux_004_src_startofpacket;                                                   // cmd_mux_004:src_startofpacket -> motor_ch5_s1_agent:cp_startofpacket
	wire  [105:0] cmd_mux_004_src_data;                                                            // cmd_mux_004:src_data -> motor_ch5_s1_agent:cp_data
	wire    [7:0] cmd_mux_004_src_channel;                                                         // cmd_mux_004:src_channel -> motor_ch5_s1_agent:cp_channel
	wire          cmd_mux_004_src_ready;                                                           // motor_ch5_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire          pwmled_s1_agent_m0_waitrequest;                                                  // pwmled_s1_translator:uav_waitrequest -> pwmled_s1_agent:m0_waitrequest
	wire    [2:0] pwmled_s1_agent_m0_burstcount;                                                   // pwmled_s1_agent:m0_burstcount -> pwmled_s1_translator:uav_burstcount
	wire   [31:0] pwmled_s1_agent_m0_writedata;                                                    // pwmled_s1_agent:m0_writedata -> pwmled_s1_translator:uav_writedata
	wire   [31:0] pwmled_s1_agent_m0_address;                                                      // pwmled_s1_agent:m0_address -> pwmled_s1_translator:uav_address
	wire          pwmled_s1_agent_m0_write;                                                        // pwmled_s1_agent:m0_write -> pwmled_s1_translator:uav_write
	wire          pwmled_s1_agent_m0_lock;                                                         // pwmled_s1_agent:m0_lock -> pwmled_s1_translator:uav_lock
	wire          pwmled_s1_agent_m0_read;                                                         // pwmled_s1_agent:m0_read -> pwmled_s1_translator:uav_read
	wire   [31:0] pwmled_s1_agent_m0_readdata;                                                     // pwmled_s1_translator:uav_readdata -> pwmled_s1_agent:m0_readdata
	wire          pwmled_s1_agent_m0_readdatavalid;                                                // pwmled_s1_translator:uav_readdatavalid -> pwmled_s1_agent:m0_readdatavalid
	wire          pwmled_s1_agent_m0_debugaccess;                                                  // pwmled_s1_agent:m0_debugaccess -> pwmled_s1_translator:uav_debugaccess
	wire    [3:0] pwmled_s1_agent_m0_byteenable;                                                   // pwmled_s1_agent:m0_byteenable -> pwmled_s1_translator:uav_byteenable
	wire          pwmled_s1_agent_rf_source_endofpacket;                                           // pwmled_s1_agent:rf_source_endofpacket -> pwmled_s1_agent_rsp_fifo:in_endofpacket
	wire          pwmled_s1_agent_rf_source_valid;                                                 // pwmled_s1_agent:rf_source_valid -> pwmled_s1_agent_rsp_fifo:in_valid
	wire          pwmled_s1_agent_rf_source_startofpacket;                                         // pwmled_s1_agent:rf_source_startofpacket -> pwmled_s1_agent_rsp_fifo:in_startofpacket
	wire  [106:0] pwmled_s1_agent_rf_source_data;                                                  // pwmled_s1_agent:rf_source_data -> pwmled_s1_agent_rsp_fifo:in_data
	wire          pwmled_s1_agent_rf_source_ready;                                                 // pwmled_s1_agent_rsp_fifo:in_ready -> pwmled_s1_agent:rf_source_ready
	wire          pwmled_s1_agent_rsp_fifo_out_endofpacket;                                        // pwmled_s1_agent_rsp_fifo:out_endofpacket -> pwmled_s1_agent:rf_sink_endofpacket
	wire          pwmled_s1_agent_rsp_fifo_out_valid;                                              // pwmled_s1_agent_rsp_fifo:out_valid -> pwmled_s1_agent:rf_sink_valid
	wire          pwmled_s1_agent_rsp_fifo_out_startofpacket;                                      // pwmled_s1_agent_rsp_fifo:out_startofpacket -> pwmled_s1_agent:rf_sink_startofpacket
	wire  [106:0] pwmled_s1_agent_rsp_fifo_out_data;                                               // pwmled_s1_agent_rsp_fifo:out_data -> pwmled_s1_agent:rf_sink_data
	wire          pwmled_s1_agent_rsp_fifo_out_ready;                                              // pwmled_s1_agent:rf_sink_ready -> pwmled_s1_agent_rsp_fifo:out_ready
	wire          pwmled_s1_agent_rdata_fifo_src_valid;                                            // pwmled_s1_agent:rdata_fifo_src_valid -> pwmled_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] pwmled_s1_agent_rdata_fifo_src_data;                                             // pwmled_s1_agent:rdata_fifo_src_data -> pwmled_s1_agent:rdata_fifo_sink_data
	wire          pwmled_s1_agent_rdata_fifo_src_ready;                                            // pwmled_s1_agent:rdata_fifo_sink_ready -> pwmled_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_005_src_endofpacket;                                                     // cmd_mux_005:src_endofpacket -> pwmled_s1_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                           // cmd_mux_005:src_valid -> pwmled_s1_agent:cp_valid
	wire          cmd_mux_005_src_startofpacket;                                                   // cmd_mux_005:src_startofpacket -> pwmled_s1_agent:cp_startofpacket
	wire  [105:0] cmd_mux_005_src_data;                                                            // cmd_mux_005:src_data -> pwmled_s1_agent:cp_data
	wire    [7:0] cmd_mux_005_src_channel;                                                         // cmd_mux_005:src_channel -> pwmled_s1_agent:cp_channel
	wire          cmd_mux_005_src_ready;                                                           // pwmled_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire          sysled_s1_agent_m0_waitrequest;                                                  // sysled_s1_translator:uav_waitrequest -> sysled_s1_agent:m0_waitrequest
	wire    [2:0] sysled_s1_agent_m0_burstcount;                                                   // sysled_s1_agent:m0_burstcount -> sysled_s1_translator:uav_burstcount
	wire   [31:0] sysled_s1_agent_m0_writedata;                                                    // sysled_s1_agent:m0_writedata -> sysled_s1_translator:uav_writedata
	wire   [31:0] sysled_s1_agent_m0_address;                                                      // sysled_s1_agent:m0_address -> sysled_s1_translator:uav_address
	wire          sysled_s1_agent_m0_write;                                                        // sysled_s1_agent:m0_write -> sysled_s1_translator:uav_write
	wire          sysled_s1_agent_m0_lock;                                                         // sysled_s1_agent:m0_lock -> sysled_s1_translator:uav_lock
	wire          sysled_s1_agent_m0_read;                                                         // sysled_s1_agent:m0_read -> sysled_s1_translator:uav_read
	wire   [31:0] sysled_s1_agent_m0_readdata;                                                     // sysled_s1_translator:uav_readdata -> sysled_s1_agent:m0_readdata
	wire          sysled_s1_agent_m0_readdatavalid;                                                // sysled_s1_translator:uav_readdatavalid -> sysled_s1_agent:m0_readdatavalid
	wire          sysled_s1_agent_m0_debugaccess;                                                  // sysled_s1_agent:m0_debugaccess -> sysled_s1_translator:uav_debugaccess
	wire    [3:0] sysled_s1_agent_m0_byteenable;                                                   // sysled_s1_agent:m0_byteenable -> sysled_s1_translator:uav_byteenable
	wire          sysled_s1_agent_rf_source_endofpacket;                                           // sysled_s1_agent:rf_source_endofpacket -> sysled_s1_agent_rsp_fifo:in_endofpacket
	wire          sysled_s1_agent_rf_source_valid;                                                 // sysled_s1_agent:rf_source_valid -> sysled_s1_agent_rsp_fifo:in_valid
	wire          sysled_s1_agent_rf_source_startofpacket;                                         // sysled_s1_agent:rf_source_startofpacket -> sysled_s1_agent_rsp_fifo:in_startofpacket
	wire  [106:0] sysled_s1_agent_rf_source_data;                                                  // sysled_s1_agent:rf_source_data -> sysled_s1_agent_rsp_fifo:in_data
	wire          sysled_s1_agent_rf_source_ready;                                                 // sysled_s1_agent_rsp_fifo:in_ready -> sysled_s1_agent:rf_source_ready
	wire          sysled_s1_agent_rsp_fifo_out_endofpacket;                                        // sysled_s1_agent_rsp_fifo:out_endofpacket -> sysled_s1_agent:rf_sink_endofpacket
	wire          sysled_s1_agent_rsp_fifo_out_valid;                                              // sysled_s1_agent_rsp_fifo:out_valid -> sysled_s1_agent:rf_sink_valid
	wire          sysled_s1_agent_rsp_fifo_out_startofpacket;                                      // sysled_s1_agent_rsp_fifo:out_startofpacket -> sysled_s1_agent:rf_sink_startofpacket
	wire  [106:0] sysled_s1_agent_rsp_fifo_out_data;                                               // sysled_s1_agent_rsp_fifo:out_data -> sysled_s1_agent:rf_sink_data
	wire          sysled_s1_agent_rsp_fifo_out_ready;                                              // sysled_s1_agent:rf_sink_ready -> sysled_s1_agent_rsp_fifo:out_ready
	wire          sysled_s1_agent_rdata_fifo_src_valid;                                            // sysled_s1_agent:rdata_fifo_src_valid -> sysled_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] sysled_s1_agent_rdata_fifo_src_data;                                             // sysled_s1_agent:rdata_fifo_src_data -> sysled_s1_agent:rdata_fifo_sink_data
	wire          sysled_s1_agent_rdata_fifo_src_ready;                                            // sysled_s1_agent:rdata_fifo_sink_ready -> sysled_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_006_src_endofpacket;                                                     // cmd_mux_006:src_endofpacket -> sysled_s1_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                                           // cmd_mux_006:src_valid -> sysled_s1_agent:cp_valid
	wire          cmd_mux_006_src_startofpacket;                                                   // cmd_mux_006:src_startofpacket -> sysled_s1_agent:cp_startofpacket
	wire  [105:0] cmd_mux_006_src_data;                                                            // cmd_mux_006:src_data -> sysled_s1_agent:cp_data
	wire    [7:0] cmd_mux_006_src_channel;                                                         // cmd_mux_006:src_channel -> sysled_s1_agent:cp_channel
	wire          cmd_mux_006_src_ready;                                                           // sysled_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire          sysid_control_slave_agent_m0_waitrequest;                                        // sysid_control_slave_translator:uav_waitrequest -> sysid_control_slave_agent:m0_waitrequest
	wire    [2:0] sysid_control_slave_agent_m0_burstcount;                                         // sysid_control_slave_agent:m0_burstcount -> sysid_control_slave_translator:uav_burstcount
	wire   [31:0] sysid_control_slave_agent_m0_writedata;                                          // sysid_control_slave_agent:m0_writedata -> sysid_control_slave_translator:uav_writedata
	wire   [31:0] sysid_control_slave_agent_m0_address;                                            // sysid_control_slave_agent:m0_address -> sysid_control_slave_translator:uav_address
	wire          sysid_control_slave_agent_m0_write;                                              // sysid_control_slave_agent:m0_write -> sysid_control_slave_translator:uav_write
	wire          sysid_control_slave_agent_m0_lock;                                               // sysid_control_slave_agent:m0_lock -> sysid_control_slave_translator:uav_lock
	wire          sysid_control_slave_agent_m0_read;                                               // sysid_control_slave_agent:m0_read -> sysid_control_slave_translator:uav_read
	wire   [31:0] sysid_control_slave_agent_m0_readdata;                                           // sysid_control_slave_translator:uav_readdata -> sysid_control_slave_agent:m0_readdata
	wire          sysid_control_slave_agent_m0_readdatavalid;                                      // sysid_control_slave_translator:uav_readdatavalid -> sysid_control_slave_agent:m0_readdatavalid
	wire          sysid_control_slave_agent_m0_debugaccess;                                        // sysid_control_slave_agent:m0_debugaccess -> sysid_control_slave_translator:uav_debugaccess
	wire    [3:0] sysid_control_slave_agent_m0_byteenable;                                         // sysid_control_slave_agent:m0_byteenable -> sysid_control_slave_translator:uav_byteenable
	wire          sysid_control_slave_agent_rf_source_endofpacket;                                 // sysid_control_slave_agent:rf_source_endofpacket -> sysid_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_control_slave_agent_rf_source_valid;                                       // sysid_control_slave_agent:rf_source_valid -> sysid_control_slave_agent_rsp_fifo:in_valid
	wire          sysid_control_slave_agent_rf_source_startofpacket;                               // sysid_control_slave_agent:rf_source_startofpacket -> sysid_control_slave_agent_rsp_fifo:in_startofpacket
	wire  [106:0] sysid_control_slave_agent_rf_source_data;                                        // sysid_control_slave_agent:rf_source_data -> sysid_control_slave_agent_rsp_fifo:in_data
	wire          sysid_control_slave_agent_rf_source_ready;                                       // sysid_control_slave_agent_rsp_fifo:in_ready -> sysid_control_slave_agent:rf_source_ready
	wire          sysid_control_slave_agent_rsp_fifo_out_endofpacket;                              // sysid_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_control_slave_agent:rf_sink_endofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_valid;                                    // sysid_control_slave_agent_rsp_fifo:out_valid -> sysid_control_slave_agent:rf_sink_valid
	wire          sysid_control_slave_agent_rsp_fifo_out_startofpacket;                            // sysid_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_control_slave_agent:rf_sink_startofpacket
	wire  [106:0] sysid_control_slave_agent_rsp_fifo_out_data;                                     // sysid_control_slave_agent_rsp_fifo:out_data -> sysid_control_slave_agent:rf_sink_data
	wire          sysid_control_slave_agent_rsp_fifo_out_ready;                                    // sysid_control_slave_agent:rf_sink_ready -> sysid_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_control_slave_agent_rdata_fifo_src_valid;                                  // sysid_control_slave_agent:rdata_fifo_src_valid -> sysid_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_src_data;                                   // sysid_control_slave_agent:rdata_fifo_src_data -> sysid_control_slave_agent:rdata_fifo_sink_data
	wire          sysid_control_slave_agent_rdata_fifo_src_ready;                                  // sysid_control_slave_agent:rdata_fifo_sink_ready -> sysid_control_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_007_src_endofpacket;                                                     // cmd_mux_007:src_endofpacket -> sysid_control_slave_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                                           // cmd_mux_007:src_valid -> sysid_control_slave_agent:cp_valid
	wire          cmd_mux_007_src_startofpacket;                                                   // cmd_mux_007:src_startofpacket -> sysid_control_slave_agent:cp_startofpacket
	wire  [105:0] cmd_mux_007_src_data;                                                            // cmd_mux_007:src_data -> sysid_control_slave_agent:cp_data
	wire    [7:0] cmd_mux_007_src_channel;                                                         // cmd_mux_007:src_channel -> sysid_control_slave_agent:cp_channel
	wire          cmd_mux_007_src_ready;                                                           // sysid_control_slave_agent:cp_ready -> cmd_mux_007:src_ready
	wire          peridot_bridge_avalon_master_agent_cp_endofpacket;                               // peridot_bridge_avalon_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          peridot_bridge_avalon_master_agent_cp_valid;                                     // peridot_bridge_avalon_master_agent:cp_valid -> router:sink_valid
	wire          peridot_bridge_avalon_master_agent_cp_startofpacket;                             // peridot_bridge_avalon_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire  [105:0] peridot_bridge_avalon_master_agent_cp_data;                                      // peridot_bridge_avalon_master_agent:cp_data -> router:sink_data
	wire          peridot_bridge_avalon_master_agent_cp_ready;                                     // router:sink_ready -> peridot_bridge_avalon_master_agent:cp_ready
	wire          motor_ch1_s1_agent_rp_endofpacket;                                               // motor_ch1_s1_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          motor_ch1_s1_agent_rp_valid;                                                     // motor_ch1_s1_agent:rp_valid -> router_001:sink_valid
	wire          motor_ch1_s1_agent_rp_startofpacket;                                             // motor_ch1_s1_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire  [105:0] motor_ch1_s1_agent_rp_data;                                                      // motor_ch1_s1_agent:rp_data -> router_001:sink_data
	wire          motor_ch1_s1_agent_rp_ready;                                                     // router_001:sink_ready -> motor_ch1_s1_agent:rp_ready
	wire          router_001_src_endofpacket;                                                      // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_001_src_valid;                                                            // router_001:src_valid -> rsp_demux:sink_valid
	wire          router_001_src_startofpacket;                                                    // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire  [105:0] router_001_src_data;                                                             // router_001:src_data -> rsp_demux:sink_data
	wire    [7:0] router_001_src_channel;                                                          // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_ready;                                                            // rsp_demux:sink_ready -> router_001:src_ready
	wire          motor_ch2_s1_agent_rp_endofpacket;                                               // motor_ch2_s1_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          motor_ch2_s1_agent_rp_valid;                                                     // motor_ch2_s1_agent:rp_valid -> router_002:sink_valid
	wire          motor_ch2_s1_agent_rp_startofpacket;                                             // motor_ch2_s1_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire  [105:0] motor_ch2_s1_agent_rp_data;                                                      // motor_ch2_s1_agent:rp_data -> router_002:sink_data
	wire          motor_ch2_s1_agent_rp_ready;                                                     // router_002:sink_ready -> motor_ch2_s1_agent:rp_ready
	wire          router_002_src_endofpacket;                                                      // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_002_src_valid;                                                            // router_002:src_valid -> rsp_demux_001:sink_valid
	wire          router_002_src_startofpacket;                                                    // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire  [105:0] router_002_src_data;                                                             // router_002:src_data -> rsp_demux_001:sink_data
	wire    [7:0] router_002_src_channel;                                                          // router_002:src_channel -> rsp_demux_001:sink_channel
	wire          router_002_src_ready;                                                            // rsp_demux_001:sink_ready -> router_002:src_ready
	wire          motor_ch3_s1_agent_rp_endofpacket;                                               // motor_ch3_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          motor_ch3_s1_agent_rp_valid;                                                     // motor_ch3_s1_agent:rp_valid -> router_003:sink_valid
	wire          motor_ch3_s1_agent_rp_startofpacket;                                             // motor_ch3_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire  [105:0] motor_ch3_s1_agent_rp_data;                                                      // motor_ch3_s1_agent:rp_data -> router_003:sink_data
	wire          motor_ch3_s1_agent_rp_ready;                                                     // router_003:sink_ready -> motor_ch3_s1_agent:rp_ready
	wire          router_003_src_endofpacket;                                                      // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_003_src_valid;                                                            // router_003:src_valid -> rsp_demux_002:sink_valid
	wire          router_003_src_startofpacket;                                                    // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire  [105:0] router_003_src_data;                                                             // router_003:src_data -> rsp_demux_002:sink_data
	wire    [7:0] router_003_src_channel;                                                          // router_003:src_channel -> rsp_demux_002:sink_channel
	wire          router_003_src_ready;                                                            // rsp_demux_002:sink_ready -> router_003:src_ready
	wire          motor_ch4_s1_agent_rp_endofpacket;                                               // motor_ch4_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          motor_ch4_s1_agent_rp_valid;                                                     // motor_ch4_s1_agent:rp_valid -> router_004:sink_valid
	wire          motor_ch4_s1_agent_rp_startofpacket;                                             // motor_ch4_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire  [105:0] motor_ch4_s1_agent_rp_data;                                                      // motor_ch4_s1_agent:rp_data -> router_004:sink_data
	wire          motor_ch4_s1_agent_rp_ready;                                                     // router_004:sink_ready -> motor_ch4_s1_agent:rp_ready
	wire          router_004_src_endofpacket;                                                      // router_004:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_004_src_valid;                                                            // router_004:src_valid -> rsp_demux_003:sink_valid
	wire          router_004_src_startofpacket;                                                    // router_004:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire  [105:0] router_004_src_data;                                                             // router_004:src_data -> rsp_demux_003:sink_data
	wire    [7:0] router_004_src_channel;                                                          // router_004:src_channel -> rsp_demux_003:sink_channel
	wire          router_004_src_ready;                                                            // rsp_demux_003:sink_ready -> router_004:src_ready
	wire          motor_ch5_s1_agent_rp_endofpacket;                                               // motor_ch5_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          motor_ch5_s1_agent_rp_valid;                                                     // motor_ch5_s1_agent:rp_valid -> router_005:sink_valid
	wire          motor_ch5_s1_agent_rp_startofpacket;                                             // motor_ch5_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire  [105:0] motor_ch5_s1_agent_rp_data;                                                      // motor_ch5_s1_agent:rp_data -> router_005:sink_data
	wire          motor_ch5_s1_agent_rp_ready;                                                     // router_005:sink_ready -> motor_ch5_s1_agent:rp_ready
	wire          router_005_src_endofpacket;                                                      // router_005:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_005_src_valid;                                                            // router_005:src_valid -> rsp_demux_004:sink_valid
	wire          router_005_src_startofpacket;                                                    // router_005:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire  [105:0] router_005_src_data;                                                             // router_005:src_data -> rsp_demux_004:sink_data
	wire    [7:0] router_005_src_channel;                                                          // router_005:src_channel -> rsp_demux_004:sink_channel
	wire          router_005_src_ready;                                                            // rsp_demux_004:sink_ready -> router_005:src_ready
	wire          pwmled_s1_agent_rp_endofpacket;                                                  // pwmled_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          pwmled_s1_agent_rp_valid;                                                        // pwmled_s1_agent:rp_valid -> router_006:sink_valid
	wire          pwmled_s1_agent_rp_startofpacket;                                                // pwmled_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire  [105:0] pwmled_s1_agent_rp_data;                                                         // pwmled_s1_agent:rp_data -> router_006:sink_data
	wire          pwmled_s1_agent_rp_ready;                                                        // router_006:sink_ready -> pwmled_s1_agent:rp_ready
	wire          router_006_src_endofpacket;                                                      // router_006:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_006_src_valid;                                                            // router_006:src_valid -> rsp_demux_005:sink_valid
	wire          router_006_src_startofpacket;                                                    // router_006:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire  [105:0] router_006_src_data;                                                             // router_006:src_data -> rsp_demux_005:sink_data
	wire    [7:0] router_006_src_channel;                                                          // router_006:src_channel -> rsp_demux_005:sink_channel
	wire          router_006_src_ready;                                                            // rsp_demux_005:sink_ready -> router_006:src_ready
	wire          sysled_s1_agent_rp_endofpacket;                                                  // sysled_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          sysled_s1_agent_rp_valid;                                                        // sysled_s1_agent:rp_valid -> router_007:sink_valid
	wire          sysled_s1_agent_rp_startofpacket;                                                // sysled_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire  [105:0] sysled_s1_agent_rp_data;                                                         // sysled_s1_agent:rp_data -> router_007:sink_data
	wire          sysled_s1_agent_rp_ready;                                                        // router_007:sink_ready -> sysled_s1_agent:rp_ready
	wire          router_007_src_endofpacket;                                                      // router_007:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          router_007_src_valid;                                                            // router_007:src_valid -> rsp_demux_006:sink_valid
	wire          router_007_src_startofpacket;                                                    // router_007:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire  [105:0] router_007_src_data;                                                             // router_007:src_data -> rsp_demux_006:sink_data
	wire    [7:0] router_007_src_channel;                                                          // router_007:src_channel -> rsp_demux_006:sink_channel
	wire          router_007_src_ready;                                                            // rsp_demux_006:sink_ready -> router_007:src_ready
	wire          sysid_control_slave_agent_rp_endofpacket;                                        // sysid_control_slave_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          sysid_control_slave_agent_rp_valid;                                              // sysid_control_slave_agent:rp_valid -> router_008:sink_valid
	wire          sysid_control_slave_agent_rp_startofpacket;                                      // sysid_control_slave_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire  [105:0] sysid_control_slave_agent_rp_data;                                               // sysid_control_slave_agent:rp_data -> router_008:sink_data
	wire          sysid_control_slave_agent_rp_ready;                                              // router_008:sink_ready -> sysid_control_slave_agent:rp_ready
	wire          router_008_src_endofpacket;                                                      // router_008:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          router_008_src_valid;                                                            // router_008:src_valid -> rsp_demux_007:sink_valid
	wire          router_008_src_startofpacket;                                                    // router_008:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire  [105:0] router_008_src_data;                                                             // router_008:src_data -> rsp_demux_007:sink_data
	wire    [7:0] router_008_src_channel;                                                          // router_008:src_channel -> rsp_demux_007:sink_channel
	wire          router_008_src_ready;                                                            // rsp_demux_007:sink_ready -> router_008:src_ready
	wire          router_src_endofpacket;                                                          // router:src_endofpacket -> peridot_bridge_avalon_master_limiter:cmd_sink_endofpacket
	wire          router_src_valid;                                                                // router:src_valid -> peridot_bridge_avalon_master_limiter:cmd_sink_valid
	wire          router_src_startofpacket;                                                        // router:src_startofpacket -> peridot_bridge_avalon_master_limiter:cmd_sink_startofpacket
	wire  [105:0] router_src_data;                                                                 // router:src_data -> peridot_bridge_avalon_master_limiter:cmd_sink_data
	wire    [7:0] router_src_channel;                                                              // router:src_channel -> peridot_bridge_avalon_master_limiter:cmd_sink_channel
	wire          router_src_ready;                                                                // peridot_bridge_avalon_master_limiter:cmd_sink_ready -> router:src_ready
	wire          peridot_bridge_avalon_master_limiter_cmd_src_endofpacket;                        // peridot_bridge_avalon_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          peridot_bridge_avalon_master_limiter_cmd_src_startofpacket;                      // peridot_bridge_avalon_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire  [105:0] peridot_bridge_avalon_master_limiter_cmd_src_data;                               // peridot_bridge_avalon_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire    [7:0] peridot_bridge_avalon_master_limiter_cmd_src_channel;                            // peridot_bridge_avalon_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          peridot_bridge_avalon_master_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> peridot_bridge_avalon_master_limiter:cmd_src_ready
	wire          rsp_mux_src_endofpacket;                                                         // rsp_mux:src_endofpacket -> peridot_bridge_avalon_master_limiter:rsp_sink_endofpacket
	wire          rsp_mux_src_valid;                                                               // rsp_mux:src_valid -> peridot_bridge_avalon_master_limiter:rsp_sink_valid
	wire          rsp_mux_src_startofpacket;                                                       // rsp_mux:src_startofpacket -> peridot_bridge_avalon_master_limiter:rsp_sink_startofpacket
	wire  [105:0] rsp_mux_src_data;                                                                // rsp_mux:src_data -> peridot_bridge_avalon_master_limiter:rsp_sink_data
	wire    [7:0] rsp_mux_src_channel;                                                             // rsp_mux:src_channel -> peridot_bridge_avalon_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_ready;                                                               // peridot_bridge_avalon_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire          peridot_bridge_avalon_master_limiter_rsp_src_endofpacket;                        // peridot_bridge_avalon_master_limiter:rsp_src_endofpacket -> peridot_bridge_avalon_master_agent:rp_endofpacket
	wire          peridot_bridge_avalon_master_limiter_rsp_src_valid;                              // peridot_bridge_avalon_master_limiter:rsp_src_valid -> peridot_bridge_avalon_master_agent:rp_valid
	wire          peridot_bridge_avalon_master_limiter_rsp_src_startofpacket;                      // peridot_bridge_avalon_master_limiter:rsp_src_startofpacket -> peridot_bridge_avalon_master_agent:rp_startofpacket
	wire  [105:0] peridot_bridge_avalon_master_limiter_rsp_src_data;                               // peridot_bridge_avalon_master_limiter:rsp_src_data -> peridot_bridge_avalon_master_agent:rp_data
	wire    [7:0] peridot_bridge_avalon_master_limiter_rsp_src_channel;                            // peridot_bridge_avalon_master_limiter:rsp_src_channel -> peridot_bridge_avalon_master_agent:rp_channel
	wire          peridot_bridge_avalon_master_limiter_rsp_src_ready;                              // peridot_bridge_avalon_master_agent:rp_ready -> peridot_bridge_avalon_master_limiter:rsp_src_ready
	wire          cmd_demux_src0_endofpacket;                                                      // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                                            // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire          cmd_demux_src0_startofpacket;                                                    // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire  [105:0] cmd_demux_src0_data;                                                             // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire    [7:0] cmd_demux_src0_channel;                                                          // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_ready;                                                            // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire          cmd_demux_src1_endofpacket;                                                      // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                            // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire          cmd_demux_src1_startofpacket;                                                    // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire  [105:0] cmd_demux_src1_data;                                                             // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire    [7:0] cmd_demux_src1_channel;                                                          // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_ready;                                                            // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire          cmd_demux_src2_endofpacket;                                                      // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                            // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire          cmd_demux_src2_startofpacket;                                                    // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire  [105:0] cmd_demux_src2_data;                                                             // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire    [7:0] cmd_demux_src2_channel;                                                          // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_ready;                                                            // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire          cmd_demux_src3_endofpacket;                                                      // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                            // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire          cmd_demux_src3_startofpacket;                                                    // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire  [105:0] cmd_demux_src3_data;                                                             // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire    [7:0] cmd_demux_src3_channel;                                                          // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_ready;                                                            // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire          cmd_demux_src4_endofpacket;                                                      // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                            // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire          cmd_demux_src4_startofpacket;                                                    // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire  [105:0] cmd_demux_src4_data;                                                             // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire    [7:0] cmd_demux_src4_channel;                                                          // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_ready;                                                            // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire          cmd_demux_src5_endofpacket;                                                      // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                            // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire          cmd_demux_src5_startofpacket;                                                    // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire  [105:0] cmd_demux_src5_data;                                                             // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire    [7:0] cmd_demux_src5_channel;                                                          // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_ready;                                                            // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire          cmd_demux_src6_endofpacket;                                                      // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                            // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire          cmd_demux_src6_startofpacket;                                                    // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire  [105:0] cmd_demux_src6_data;                                                             // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire    [7:0] cmd_demux_src6_channel;                                                          // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_ready;                                                            // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire          cmd_demux_src7_endofpacket;                                                      // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                            // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire          cmd_demux_src7_startofpacket;                                                    // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire  [105:0] cmd_demux_src7_data;                                                             // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire    [7:0] cmd_demux_src7_channel;                                                          // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_ready;                                                            // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire          rsp_demux_src0_endofpacket;                                                      // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                            // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire          rsp_demux_src0_startofpacket;                                                    // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire  [105:0] rsp_demux_src0_data;                                                             // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire    [7:0] rsp_demux_src0_channel;                                                          // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_ready;                                                            // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire          rsp_demux_001_src0_endofpacket;                                                  // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src0_valid;                                                        // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire          rsp_demux_001_src0_startofpacket;                                                // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire  [105:0] rsp_demux_001_src0_data;                                                         // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire    [7:0] rsp_demux_001_src0_channel;                                                      // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_ready;                                                        // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire          rsp_demux_002_src0_endofpacket;                                                  // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src0_valid;                                                        // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire          rsp_demux_002_src0_startofpacket;                                                // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire  [105:0] rsp_demux_002_src0_data;                                                         // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire    [7:0] rsp_demux_002_src0_channel;                                                      // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_ready;                                                        // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire          rsp_demux_003_src0_endofpacket;                                                  // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src0_valid;                                                        // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire          rsp_demux_003_src0_startofpacket;                                                // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire  [105:0] rsp_demux_003_src0_data;                                                         // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire    [7:0] rsp_demux_003_src0_channel;                                                      // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_ready;                                                        // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire          rsp_demux_004_src0_endofpacket;                                                  // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src0_valid;                                                        // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire          rsp_demux_004_src0_startofpacket;                                                // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire  [105:0] rsp_demux_004_src0_data;                                                         // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire    [7:0] rsp_demux_004_src0_channel;                                                      // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_ready;                                                        // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire          rsp_demux_005_src0_endofpacket;                                                  // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src0_valid;                                                        // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire          rsp_demux_005_src0_startofpacket;                                                // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire  [105:0] rsp_demux_005_src0_data;                                                         // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire    [7:0] rsp_demux_005_src0_channel;                                                      // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_ready;                                                        // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire          rsp_demux_006_src0_endofpacket;                                                  // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src0_valid;                                                        // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire          rsp_demux_006_src0_startofpacket;                                                // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire  [105:0] rsp_demux_006_src0_data;                                                         // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire    [7:0] rsp_demux_006_src0_channel;                                                      // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_ready;                                                        // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire          rsp_demux_007_src0_endofpacket;                                                  // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src0_valid;                                                        // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire          rsp_demux_007_src0_startofpacket;                                                // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire  [105:0] rsp_demux_007_src0_data;                                                         // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire    [7:0] rsp_demux_007_src0_channel;                                                      // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_ready;                                                        // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire    [7:0] peridot_bridge_avalon_master_limiter_cmd_valid_data;                             // peridot_bridge_avalon_master_limiter:cmd_src_valid -> cmd_demux:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) peridot_bridge_avalon_master_translator (
		.clk                      (clk_0_clk_clk),                                                                   //                       clk.clk
		.reset                    (peridot_bridge_reset_reset_bridge_in_reset_reset),                                //                     reset.reset
		.uav_address              (peridot_bridge_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (peridot_bridge_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (peridot_bridge_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (peridot_bridge_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (peridot_bridge_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (peridot_bridge_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (peridot_bridge_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (peridot_bridge_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (peridot_bridge_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (peridot_bridge_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (peridot_bridge_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (peridot_bridge_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (peridot_bridge_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable            (peridot_bridge_avalon_master_byteenable),                                         //                          .byteenable
		.av_read                  (peridot_bridge_avalon_master_read),                                               //                          .read
		.av_readdata              (peridot_bridge_avalon_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (peridot_bridge_avalon_master_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (peridot_bridge_avalon_master_write),                                              //                          .write
		.av_writedata             (peridot_bridge_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount            (1'b1),                                                                            //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                            //               (terminated)
		.av_begintransfer         (1'b0),                                                                            //               (terminated)
		.av_chipselect            (1'b0),                                                                            //               (terminated)
		.av_lock                  (1'b0),                                                                            //               (terminated)
		.av_debugaccess           (1'b0),                                                                            //               (terminated)
		.uav_clken                (),                                                                                //               (terminated)
		.av_clken                 (1'b1),                                                                            //               (terminated)
		.uav_response             (2'b00),                                                                           //               (terminated)
		.av_response              (),                                                                                //               (terminated)
		.uav_writeresponserequest (),                                                                                //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                            //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                            //               (terminated)
		.av_writeresponsevalid    ()                                                                                 //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) motor_ch1_s1_translator (
		.clk                      (clk_0_clk_clk),                                    //                      clk.clk
		.reset                    (peridot_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (motor_ch1_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount           (motor_ch1_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read                 (motor_ch1_s1_agent_m0_read),                       //                         .read
		.uav_write                (motor_ch1_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest          (motor_ch1_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid        (motor_ch1_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable           (motor_ch1_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata             (motor_ch1_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata            (motor_ch1_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock                 (motor_ch1_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess          (motor_ch1_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address               (motor_ch1_s1_address),                             //      avalon_anti_slave_0.address
		.av_write                 (motor_ch1_s1_write),                               //                         .write
		.av_readdata              (motor_ch1_s1_readdata),                            //                         .readdata
		.av_writedata             (motor_ch1_s1_writedata),                           //                         .writedata
		.av_chipselect            (motor_ch1_s1_chipselect),                          //                         .chipselect
		.av_read                  (),                                                 //              (terminated)
		.av_begintransfer         (),                                                 //              (terminated)
		.av_beginbursttransfer    (),                                                 //              (terminated)
		.av_burstcount            (),                                                 //              (terminated)
		.av_byteenable            (),                                                 //              (terminated)
		.av_readdatavalid         (1'b0),                                             //              (terminated)
		.av_waitrequest           (1'b0),                                             //              (terminated)
		.av_writebyteenable       (),                                                 //              (terminated)
		.av_lock                  (),                                                 //              (terminated)
		.av_clken                 (),                                                 //              (terminated)
		.uav_clken                (1'b0),                                             //              (terminated)
		.av_debugaccess           (),                                                 //              (terminated)
		.av_outputenable          (),                                                 //              (terminated)
		.uav_response             (),                                                 //              (terminated)
		.av_response              (2'b00),                                            //              (terminated)
		.uav_writeresponserequest (1'b0),                                             //              (terminated)
		.uav_writeresponsevalid   (),                                                 //              (terminated)
		.av_writeresponserequest  (),                                                 //              (terminated)
		.av_writeresponsevalid    (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) motor_ch2_s1_translator (
		.clk                      (clk_0_clk_clk),                                    //                      clk.clk
		.reset                    (peridot_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (motor_ch2_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount           (motor_ch2_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read                 (motor_ch2_s1_agent_m0_read),                       //                         .read
		.uav_write                (motor_ch2_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest          (motor_ch2_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid        (motor_ch2_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable           (motor_ch2_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata             (motor_ch2_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata            (motor_ch2_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock                 (motor_ch2_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess          (motor_ch2_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address               (motor_ch2_s1_address),                             //      avalon_anti_slave_0.address
		.av_write                 (motor_ch2_s1_write),                               //                         .write
		.av_readdata              (motor_ch2_s1_readdata),                            //                         .readdata
		.av_writedata             (motor_ch2_s1_writedata),                           //                         .writedata
		.av_chipselect            (motor_ch2_s1_chipselect),                          //                         .chipselect
		.av_read                  (),                                                 //              (terminated)
		.av_begintransfer         (),                                                 //              (terminated)
		.av_beginbursttransfer    (),                                                 //              (terminated)
		.av_burstcount            (),                                                 //              (terminated)
		.av_byteenable            (),                                                 //              (terminated)
		.av_readdatavalid         (1'b0),                                             //              (terminated)
		.av_waitrequest           (1'b0),                                             //              (terminated)
		.av_writebyteenable       (),                                                 //              (terminated)
		.av_lock                  (),                                                 //              (terminated)
		.av_clken                 (),                                                 //              (terminated)
		.uav_clken                (1'b0),                                             //              (terminated)
		.av_debugaccess           (),                                                 //              (terminated)
		.av_outputenable          (),                                                 //              (terminated)
		.uav_response             (),                                                 //              (terminated)
		.av_response              (2'b00),                                            //              (terminated)
		.uav_writeresponserequest (1'b0),                                             //              (terminated)
		.uav_writeresponsevalid   (),                                                 //              (terminated)
		.av_writeresponserequest  (),                                                 //              (terminated)
		.av_writeresponsevalid    (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) motor_ch3_s1_translator (
		.clk                      (clk_0_clk_clk),                                    //                      clk.clk
		.reset                    (peridot_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (motor_ch3_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount           (motor_ch3_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read                 (motor_ch3_s1_agent_m0_read),                       //                         .read
		.uav_write                (motor_ch3_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest          (motor_ch3_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid        (motor_ch3_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable           (motor_ch3_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata             (motor_ch3_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata            (motor_ch3_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock                 (motor_ch3_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess          (motor_ch3_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address               (motor_ch3_s1_address),                             //      avalon_anti_slave_0.address
		.av_write                 (motor_ch3_s1_write),                               //                         .write
		.av_readdata              (motor_ch3_s1_readdata),                            //                         .readdata
		.av_writedata             (motor_ch3_s1_writedata),                           //                         .writedata
		.av_chipselect            (motor_ch3_s1_chipselect),                          //                         .chipselect
		.av_read                  (),                                                 //              (terminated)
		.av_begintransfer         (),                                                 //              (terminated)
		.av_beginbursttransfer    (),                                                 //              (terminated)
		.av_burstcount            (),                                                 //              (terminated)
		.av_byteenable            (),                                                 //              (terminated)
		.av_readdatavalid         (1'b0),                                             //              (terminated)
		.av_waitrequest           (1'b0),                                             //              (terminated)
		.av_writebyteenable       (),                                                 //              (terminated)
		.av_lock                  (),                                                 //              (terminated)
		.av_clken                 (),                                                 //              (terminated)
		.uav_clken                (1'b0),                                             //              (terminated)
		.av_debugaccess           (),                                                 //              (terminated)
		.av_outputenable          (),                                                 //              (terminated)
		.uav_response             (),                                                 //              (terminated)
		.av_response              (2'b00),                                            //              (terminated)
		.uav_writeresponserequest (1'b0),                                             //              (terminated)
		.uav_writeresponsevalid   (),                                                 //              (terminated)
		.av_writeresponserequest  (),                                                 //              (terminated)
		.av_writeresponsevalid    (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) motor_ch4_s1_translator (
		.clk                      (clk_0_clk_clk),                                    //                      clk.clk
		.reset                    (peridot_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (motor_ch4_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount           (motor_ch4_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read                 (motor_ch4_s1_agent_m0_read),                       //                         .read
		.uav_write                (motor_ch4_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest          (motor_ch4_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid        (motor_ch4_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable           (motor_ch4_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata             (motor_ch4_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata            (motor_ch4_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock                 (motor_ch4_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess          (motor_ch4_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address               (motor_ch4_s1_address),                             //      avalon_anti_slave_0.address
		.av_write                 (motor_ch4_s1_write),                               //                         .write
		.av_readdata              (motor_ch4_s1_readdata),                            //                         .readdata
		.av_writedata             (motor_ch4_s1_writedata),                           //                         .writedata
		.av_chipselect            (motor_ch4_s1_chipselect),                          //                         .chipselect
		.av_read                  (),                                                 //              (terminated)
		.av_begintransfer         (),                                                 //              (terminated)
		.av_beginbursttransfer    (),                                                 //              (terminated)
		.av_burstcount            (),                                                 //              (terminated)
		.av_byteenable            (),                                                 //              (terminated)
		.av_readdatavalid         (1'b0),                                             //              (terminated)
		.av_waitrequest           (1'b0),                                             //              (terminated)
		.av_writebyteenable       (),                                                 //              (terminated)
		.av_lock                  (),                                                 //              (terminated)
		.av_clken                 (),                                                 //              (terminated)
		.uav_clken                (1'b0),                                             //              (terminated)
		.av_debugaccess           (),                                                 //              (terminated)
		.av_outputenable          (),                                                 //              (terminated)
		.uav_response             (),                                                 //              (terminated)
		.av_response              (2'b00),                                            //              (terminated)
		.uav_writeresponserequest (1'b0),                                             //              (terminated)
		.uav_writeresponsevalid   (),                                                 //              (terminated)
		.av_writeresponserequest  (),                                                 //              (terminated)
		.av_writeresponsevalid    (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) motor_ch5_s1_translator (
		.clk                      (clk_0_clk_clk),                                    //                      clk.clk
		.reset                    (peridot_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (motor_ch5_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount           (motor_ch5_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read                 (motor_ch5_s1_agent_m0_read),                       //                         .read
		.uav_write                (motor_ch5_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest          (motor_ch5_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid        (motor_ch5_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable           (motor_ch5_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata             (motor_ch5_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata            (motor_ch5_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock                 (motor_ch5_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess          (motor_ch5_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address               (motor_ch5_s1_address),                             //      avalon_anti_slave_0.address
		.av_write                 (motor_ch5_s1_write),                               //                         .write
		.av_readdata              (motor_ch5_s1_readdata),                            //                         .readdata
		.av_writedata             (motor_ch5_s1_writedata),                           //                         .writedata
		.av_chipselect            (motor_ch5_s1_chipselect),                          //                         .chipselect
		.av_read                  (),                                                 //              (terminated)
		.av_begintransfer         (),                                                 //              (terminated)
		.av_beginbursttransfer    (),                                                 //              (terminated)
		.av_burstcount            (),                                                 //              (terminated)
		.av_byteenable            (),                                                 //              (terminated)
		.av_readdatavalid         (1'b0),                                             //              (terminated)
		.av_waitrequest           (1'b0),                                             //              (terminated)
		.av_writebyteenable       (),                                                 //              (terminated)
		.av_lock                  (),                                                 //              (terminated)
		.av_clken                 (),                                                 //              (terminated)
		.uav_clken                (1'b0),                                             //              (terminated)
		.av_debugaccess           (),                                                 //              (terminated)
		.av_outputenable          (),                                                 //              (terminated)
		.uav_response             (),                                                 //              (terminated)
		.av_response              (2'b00),                                            //              (terminated)
		.uav_writeresponserequest (1'b0),                                             //              (terminated)
		.uav_writeresponsevalid   (),                                                 //              (terminated)
		.av_writeresponserequest  (),                                                 //              (terminated)
		.av_writeresponsevalid    (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pwmled_s1_translator (
		.clk                      (clk_0_clk_clk),                                    //                      clk.clk
		.reset                    (peridot_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (pwmled_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount           (pwmled_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read                 (pwmled_s1_agent_m0_read),                          //                         .read
		.uav_write                (pwmled_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest          (pwmled_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid        (pwmled_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable           (pwmled_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata             (pwmled_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata            (pwmled_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock                 (pwmled_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess          (pwmled_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address               (pwmled_s1_address),                                //      avalon_anti_slave_0.address
		.av_write                 (pwmled_s1_write),                                  //                         .write
		.av_readdata              (pwmled_s1_readdata),                               //                         .readdata
		.av_writedata             (pwmled_s1_writedata),                              //                         .writedata
		.av_chipselect            (pwmled_s1_chipselect),                             //                         .chipselect
		.av_read                  (),                                                 //              (terminated)
		.av_begintransfer         (),                                                 //              (terminated)
		.av_beginbursttransfer    (),                                                 //              (terminated)
		.av_burstcount            (),                                                 //              (terminated)
		.av_byteenable            (),                                                 //              (terminated)
		.av_readdatavalid         (1'b0),                                             //              (terminated)
		.av_waitrequest           (1'b0),                                             //              (terminated)
		.av_writebyteenable       (),                                                 //              (terminated)
		.av_lock                  (),                                                 //              (terminated)
		.av_clken                 (),                                                 //              (terminated)
		.uav_clken                (1'b0),                                             //              (terminated)
		.av_debugaccess           (),                                                 //              (terminated)
		.av_outputenable          (),                                                 //              (terminated)
		.uav_response             (),                                                 //              (terminated)
		.av_response              (2'b00),                                            //              (terminated)
		.uav_writeresponserequest (1'b0),                                             //              (terminated)
		.uav_writeresponsevalid   (),                                                 //              (terminated)
		.av_writeresponserequest  (),                                                 //              (terminated)
		.av_writeresponsevalid    (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysled_s1_translator (
		.clk                      (clk_0_clk_clk),                                    //                      clk.clk
		.reset                    (peridot_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (sysled_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount           (sysled_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read                 (sysled_s1_agent_m0_read),                          //                         .read
		.uav_write                (sysled_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest          (sysled_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid        (sysled_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable           (sysled_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata             (sysled_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata            (sysled_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock                 (sysled_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess          (sysled_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address               (sysled_s1_address),                                //      avalon_anti_slave_0.address
		.av_write                 (sysled_s1_write),                                  //                         .write
		.av_readdata              (sysled_s1_readdata),                               //                         .readdata
		.av_writedata             (sysled_s1_writedata),                              //                         .writedata
		.av_chipselect            (sysled_s1_chipselect),                             //                         .chipselect
		.av_read                  (),                                                 //              (terminated)
		.av_begintransfer         (),                                                 //              (terminated)
		.av_beginbursttransfer    (),                                                 //              (terminated)
		.av_burstcount            (),                                                 //              (terminated)
		.av_byteenable            (),                                                 //              (terminated)
		.av_readdatavalid         (1'b0),                                             //              (terminated)
		.av_waitrequest           (1'b0),                                             //              (terminated)
		.av_writebyteenable       (),                                                 //              (terminated)
		.av_lock                  (),                                                 //              (terminated)
		.av_clken                 (),                                                 //              (terminated)
		.uav_clken                (1'b0),                                             //              (terminated)
		.av_debugaccess           (),                                                 //              (terminated)
		.av_outputenable          (),                                                 //              (terminated)
		.uav_response             (),                                                 //              (terminated)
		.av_response              (2'b00),                                            //              (terminated)
		.uav_writeresponserequest (1'b0),                                             //              (terminated)
		.uav_writeresponsevalid   (),                                                 //              (terminated)
		.av_writeresponserequest  (),                                                 //              (terminated)
		.av_writeresponsevalid    (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_control_slave_translator (
		.clk                      (clk_0_clk_clk),                                    //                      clk.clk
		.reset                    (peridot_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (sysid_control_slave_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount           (sysid_control_slave_agent_m0_burstcount),          //                         .burstcount
		.uav_read                 (sysid_control_slave_agent_m0_read),                //                         .read
		.uav_write                (sysid_control_slave_agent_m0_write),               //                         .write
		.uav_waitrequest          (sysid_control_slave_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid        (sysid_control_slave_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable           (sysid_control_slave_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata             (sysid_control_slave_agent_m0_readdata),            //                         .readdata
		.uav_writedata            (sysid_control_slave_agent_m0_writedata),           //                         .writedata
		.uav_lock                 (sysid_control_slave_agent_m0_lock),                //                         .lock
		.uav_debugaccess          (sysid_control_slave_agent_m0_debugaccess),         //                         .debugaccess
		.av_address               (sysid_control_slave_address),                      //      avalon_anti_slave_0.address
		.av_readdata              (sysid_control_slave_readdata),                     //                         .readdata
		.av_write                 (),                                                 //              (terminated)
		.av_read                  (),                                                 //              (terminated)
		.av_writedata             (),                                                 //              (terminated)
		.av_begintransfer         (),                                                 //              (terminated)
		.av_beginbursttransfer    (),                                                 //              (terminated)
		.av_burstcount            (),                                                 //              (terminated)
		.av_byteenable            (),                                                 //              (terminated)
		.av_readdatavalid         (1'b0),                                             //              (terminated)
		.av_waitrequest           (1'b0),                                             //              (terminated)
		.av_writebyteenable       (),                                                 //              (terminated)
		.av_lock                  (),                                                 //              (terminated)
		.av_chipselect            (),                                                 //              (terminated)
		.av_clken                 (),                                                 //              (terminated)
		.uav_clken                (1'b0),                                             //              (terminated)
		.av_debugaccess           (),                                                 //              (terminated)
		.av_outputenable          (),                                                 //              (terminated)
		.uav_response             (),                                                 //              (terminated)
		.av_response              (2'b00),                                            //              (terminated)
		.uav_writeresponserequest (1'b0),                                             //              (terminated)
		.uav_writeresponsevalid   (),                                                 //              (terminated)
		.av_writeresponserequest  (),                                                 //              (terminated)
		.av_writeresponsevalid    (1'b0)                                              //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BEGIN_BURST           (85),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_BURST_TYPE_H          (82),
		.PKT_BURST_TYPE_L          (81),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_THREAD_ID_H           (93),
		.PKT_THREAD_ID_L           (93),
		.PKT_CACHE_H               (100),
		.PKT_CACHE_L               (97),
		.PKT_DATA_SIDEBAND_H       (84),
		.PKT_DATA_SIDEBAND_L       (84),
		.PKT_QOS_H                 (86),
		.PKT_QOS_L                 (86),
		.PKT_ADDR_SIDEBAND_H       (83),
		.PKT_ADDR_SIDEBAND_L       (83),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_ORI_BURST_SIZE_H      (105),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (8),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) peridot_bridge_avalon_master_agent (
		.clk                     (clk_0_clk_clk),                                                                   //       clk.clk
		.reset                   (peridot_bridge_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.av_address              (peridot_bridge_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (peridot_bridge_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (peridot_bridge_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (peridot_bridge_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (peridot_bridge_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (peridot_bridge_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (peridot_bridge_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (peridot_bridge_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (peridot_bridge_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (peridot_bridge_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (peridot_bridge_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (peridot_bridge_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (peridot_bridge_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (peridot_bridge_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (peridot_bridge_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (peridot_bridge_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (peridot_bridge_avalon_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data                 (peridot_bridge_avalon_master_limiter_rsp_src_data),                               //          .data
		.rp_channel              (peridot_bridge_avalon_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket        (peridot_bridge_avalon_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket          (peridot_bridge_avalon_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready                (peridot_bridge_avalon_master_limiter_rsp_src_ready),                              //          .ready
		.av_response             (),                                                                                // (terminated)
		.av_writeresponserequest (1'b0),                                                                            // (terminated)
		.av_writeresponsevalid   ()                                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (85),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_ORI_BURST_SIZE_H      (105),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) motor_ch1_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (peridot_bridge_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (motor_ch1_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (motor_ch1_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (motor_ch1_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (motor_ch1_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (motor_ch1_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (motor_ch1_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (motor_ch1_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (motor_ch1_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (motor_ch1_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (motor_ch1_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (motor_ch1_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (motor_ch1_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (motor_ch1_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (motor_ch1_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (motor_ch1_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (motor_ch1_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                              //                .channel
		.rf_sink_ready           (motor_ch1_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (motor_ch1_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (motor_ch1_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (motor_ch1_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (motor_ch1_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (motor_ch1_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (motor_ch1_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (motor_ch1_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (motor_ch1_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (motor_ch1_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (motor_ch1_s1_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (motor_ch1_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (motor_ch1_s1_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (motor_ch1_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (motor_ch1_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (motor_ch1_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponserequest (),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) motor_ch1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (motor_ch1_s1_agent_rf_source_data),                //        in.data
		.in_valid          (motor_ch1_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (motor_ch1_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (motor_ch1_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (motor_ch1_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (motor_ch1_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (motor_ch1_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (motor_ch1_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (motor_ch1_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (motor_ch1_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (85),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_ORI_BURST_SIZE_H      (105),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) motor_ch2_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (peridot_bridge_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (motor_ch2_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (motor_ch2_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (motor_ch2_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (motor_ch2_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (motor_ch2_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (motor_ch2_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (motor_ch2_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (motor_ch2_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (motor_ch2_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (motor_ch2_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (motor_ch2_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (motor_ch2_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (motor_ch2_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (motor_ch2_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (motor_ch2_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (motor_ch2_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_001_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                          //                .channel
		.rf_sink_ready           (motor_ch2_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (motor_ch2_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (motor_ch2_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (motor_ch2_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (motor_ch2_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (motor_ch2_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (motor_ch2_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (motor_ch2_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (motor_ch2_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (motor_ch2_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (motor_ch2_s1_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (motor_ch2_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (motor_ch2_s1_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (motor_ch2_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (motor_ch2_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (motor_ch2_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponserequest (),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) motor_ch2_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (motor_ch2_s1_agent_rf_source_data),                //        in.data
		.in_valid          (motor_ch2_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (motor_ch2_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (motor_ch2_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (motor_ch2_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (motor_ch2_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (motor_ch2_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (motor_ch2_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (motor_ch2_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (motor_ch2_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (85),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_ORI_BURST_SIZE_H      (105),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) motor_ch3_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (peridot_bridge_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (motor_ch3_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (motor_ch3_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (motor_ch3_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (motor_ch3_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (motor_ch3_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (motor_ch3_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (motor_ch3_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (motor_ch3_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (motor_ch3_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (motor_ch3_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (motor_ch3_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (motor_ch3_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (motor_ch3_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (motor_ch3_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (motor_ch3_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (motor_ch3_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_002_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                          //                .channel
		.rf_sink_ready           (motor_ch3_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (motor_ch3_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (motor_ch3_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (motor_ch3_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (motor_ch3_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (motor_ch3_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (motor_ch3_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (motor_ch3_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (motor_ch3_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (motor_ch3_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (motor_ch3_s1_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (motor_ch3_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (motor_ch3_s1_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (motor_ch3_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (motor_ch3_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (motor_ch3_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponserequest (),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) motor_ch3_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (motor_ch3_s1_agent_rf_source_data),                //        in.data
		.in_valid          (motor_ch3_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (motor_ch3_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (motor_ch3_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (motor_ch3_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (motor_ch3_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (motor_ch3_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (motor_ch3_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (motor_ch3_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (motor_ch3_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (85),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_ORI_BURST_SIZE_H      (105),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) motor_ch4_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (peridot_bridge_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (motor_ch4_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (motor_ch4_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (motor_ch4_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (motor_ch4_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (motor_ch4_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (motor_ch4_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (motor_ch4_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (motor_ch4_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (motor_ch4_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (motor_ch4_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (motor_ch4_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (motor_ch4_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (motor_ch4_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (motor_ch4_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (motor_ch4_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (motor_ch4_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_003_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                          //                .channel
		.rf_sink_ready           (motor_ch4_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (motor_ch4_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (motor_ch4_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (motor_ch4_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (motor_ch4_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (motor_ch4_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (motor_ch4_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (motor_ch4_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (motor_ch4_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (motor_ch4_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (motor_ch4_s1_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (motor_ch4_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (motor_ch4_s1_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (motor_ch4_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (motor_ch4_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (motor_ch4_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponserequest (),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) motor_ch4_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (motor_ch4_s1_agent_rf_source_data),                //        in.data
		.in_valid          (motor_ch4_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (motor_ch4_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (motor_ch4_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (motor_ch4_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (motor_ch4_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (motor_ch4_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (motor_ch4_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (motor_ch4_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (motor_ch4_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (85),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_ORI_BURST_SIZE_H      (105),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) motor_ch5_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (peridot_bridge_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (motor_ch5_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (motor_ch5_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (motor_ch5_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (motor_ch5_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (motor_ch5_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (motor_ch5_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (motor_ch5_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (motor_ch5_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (motor_ch5_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (motor_ch5_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (motor_ch5_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (motor_ch5_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (motor_ch5_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (motor_ch5_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (motor_ch5_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (motor_ch5_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_004_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                          //                .channel
		.rf_sink_ready           (motor_ch5_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (motor_ch5_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (motor_ch5_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (motor_ch5_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (motor_ch5_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (motor_ch5_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (motor_ch5_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (motor_ch5_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (motor_ch5_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (motor_ch5_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (motor_ch5_s1_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (motor_ch5_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (motor_ch5_s1_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (motor_ch5_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (motor_ch5_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (motor_ch5_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponserequest (),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) motor_ch5_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (motor_ch5_s1_agent_rf_source_data),                //        in.data
		.in_valid          (motor_ch5_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (motor_ch5_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (motor_ch5_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (motor_ch5_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (motor_ch5_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (motor_ch5_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (motor_ch5_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (motor_ch5_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (motor_ch5_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (85),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_ORI_BURST_SIZE_H      (105),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pwmled_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (peridot_bridge_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pwmled_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (pwmled_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (pwmled_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (pwmled_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (pwmled_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (pwmled_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (pwmled_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (pwmled_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (pwmled_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (pwmled_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (pwmled_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (pwmled_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (pwmled_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (pwmled_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (pwmled_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (pwmled_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_005_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                          //                .channel
		.rf_sink_ready           (pwmled_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (pwmled_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (pwmled_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (pwmled_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (pwmled_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (pwmled_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (pwmled_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (pwmled_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (pwmled_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (pwmled_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (pwmled_s1_agent_rdata_fifo_src_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pwmled_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_sink_data    (pwmled_s1_agent_rdata_fifo_src_data),              //                .data
		.rdata_fifo_src_ready    (pwmled_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pwmled_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (pwmled_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponserequest (),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pwmled_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pwmled_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (pwmled_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (pwmled_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (pwmled_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (pwmled_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (pwmled_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (pwmled_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (pwmled_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (pwmled_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (pwmled_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (85),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_ORI_BURST_SIZE_H      (105),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sysled_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (peridot_bridge_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sysled_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (sysled_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (sysled_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (sysled_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (sysled_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (sysled_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (sysled_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (sysled_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (sysled_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (sysled_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (sysled_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (sysled_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (sysled_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (sysled_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (sysled_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (sysled_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_006_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                          //                .channel
		.rf_sink_ready           (sysled_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (sysled_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (sysled_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (sysled_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (sysled_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (sysled_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (sysled_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (sysled_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (sysled_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (sysled_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (sysled_s1_agent_rdata_fifo_src_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sysled_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_sink_data    (sysled_s1_agent_rdata_fifo_src_data),              //                .data
		.rdata_fifo_src_ready    (sysled_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysled_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (sysled_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponserequest (),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysled_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sysled_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (sysled_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (sysled_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (sysled_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (sysled_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (sysled_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (sysled_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (sysled_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (sysled_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (sysled_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (85),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_ORI_BURST_SIZE_H      (105),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sysid_control_slave_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (peridot_bridge_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (sysid_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                              //                .channel
		.rf_sink_ready           (sysid_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sysid_control_slave_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sysid_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sysid_control_slave_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sysid_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponserequest (),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (peridot_bridge_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	motor_controller_core_mm_interconnect_0_router router (
		.sink_ready         (peridot_bridge_avalon_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (peridot_bridge_avalon_master_agent_cp_valid),         //          .valid
		.sink_data          (peridot_bridge_avalon_master_agent_cp_data),          //          .data
		.sink_startofpacket (peridot_bridge_avalon_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (peridot_bridge_avalon_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (peridot_bridge_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_src_ready),                                    //       src.ready
		.src_valid          (router_src_valid),                                    //          .valid
		.src_data           (router_src_data),                                     //          .data
		.src_channel        (router_src_channel),                                  //          .channel
		.src_startofpacket  (router_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                               //          .endofpacket
	);

	motor_controller_core_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (motor_ch1_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (motor_ch1_s1_agent_rp_valid),                      //          .valid
		.sink_data          (motor_ch1_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (motor_ch1_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (motor_ch1_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                             //       src.ready
		.src_valid          (router_001_src_valid),                             //          .valid
		.src_data           (router_001_src_data),                              //          .data
		.src_channel        (router_001_src_channel),                           //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                        //          .endofpacket
	);

	motor_controller_core_mm_interconnect_0_router_001 router_002 (
		.sink_ready         (motor_ch2_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (motor_ch2_s1_agent_rp_valid),                      //          .valid
		.sink_data          (motor_ch2_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (motor_ch2_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (motor_ch2_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                             //       src.ready
		.src_valid          (router_002_src_valid),                             //          .valid
		.src_data           (router_002_src_data),                              //          .data
		.src_channel        (router_002_src_channel),                           //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                        //          .endofpacket
	);

	motor_controller_core_mm_interconnect_0_router_001 router_003 (
		.sink_ready         (motor_ch3_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (motor_ch3_s1_agent_rp_valid),                      //          .valid
		.sink_data          (motor_ch3_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (motor_ch3_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (motor_ch3_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                             //       src.ready
		.src_valid          (router_003_src_valid),                             //          .valid
		.src_data           (router_003_src_data),                              //          .data
		.src_channel        (router_003_src_channel),                           //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                        //          .endofpacket
	);

	motor_controller_core_mm_interconnect_0_router_001 router_004 (
		.sink_ready         (motor_ch4_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (motor_ch4_s1_agent_rp_valid),                      //          .valid
		.sink_data          (motor_ch4_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (motor_ch4_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (motor_ch4_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                             //       src.ready
		.src_valid          (router_004_src_valid),                             //          .valid
		.src_data           (router_004_src_data),                              //          .data
		.src_channel        (router_004_src_channel),                           //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                        //          .endofpacket
	);

	motor_controller_core_mm_interconnect_0_router_001 router_005 (
		.sink_ready         (motor_ch5_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (motor_ch5_s1_agent_rp_valid),                      //          .valid
		.sink_data          (motor_ch5_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (motor_ch5_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (motor_ch5_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                             //       src.ready
		.src_valid          (router_005_src_valid),                             //          .valid
		.src_data           (router_005_src_data),                              //          .data
		.src_channel        (router_005_src_channel),                           //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                        //          .endofpacket
	);

	motor_controller_core_mm_interconnect_0_router_001 router_006 (
		.sink_ready         (pwmled_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (pwmled_s1_agent_rp_valid),                         //          .valid
		.sink_data          (pwmled_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (pwmled_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (pwmled_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                             //       src.ready
		.src_valid          (router_006_src_valid),                             //          .valid
		.src_data           (router_006_src_data),                              //          .data
		.src_channel        (router_006_src_channel),                           //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                        //          .endofpacket
	);

	motor_controller_core_mm_interconnect_0_router_001 router_007 (
		.sink_ready         (sysled_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (sysled_s1_agent_rp_valid),                         //          .valid
		.sink_data          (sysled_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (sysled_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (sysled_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                             //       src.ready
		.src_valid          (router_007_src_valid),                             //          .valid
		.src_data           (router_007_src_data),                              //          .data
		.src_channel        (router_007_src_channel),                           //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                        //          .endofpacket
	);

	motor_controller_core_mm_interconnect_0_router_001 router_008 (
		.sink_ready         (sysid_control_slave_agent_rp_ready),               //      sink.ready
		.sink_valid         (sysid_control_slave_agent_rp_valid),               //          .valid
		.sink_data          (sysid_control_slave_agent_rp_data),                //          .data
		.sink_startofpacket (sysid_control_slave_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (sysid_control_slave_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                             //       src.ready
		.src_valid          (router_008_src_valid),                             //          .valid
		.src_data           (router_008_src_data),                              //          .data
		.src_channel        (router_008_src_channel),                           //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                        //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (8),
		.VALID_WIDTH               (8),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) peridot_bridge_avalon_master_limiter (
		.clk                    (clk_0_clk_clk),                                              //       clk.clk
		.reset                  (peridot_bridge_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                           //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                           //          .valid
		.cmd_sink_data          (router_src_data),                                            //          .data
		.cmd_sink_channel       (router_src_channel),                                         //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                   //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                     //          .endofpacket
		.cmd_src_ready          (peridot_bridge_avalon_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (peridot_bridge_avalon_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (peridot_bridge_avalon_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (peridot_bridge_avalon_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (peridot_bridge_avalon_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                          //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                          //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                        //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                           //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                  //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                    //          .endofpacket
		.rsp_src_ready          (peridot_bridge_avalon_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (peridot_bridge_avalon_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (peridot_bridge_avalon_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (peridot_bridge_avalon_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (peridot_bridge_avalon_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (peridot_bridge_avalon_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (peridot_bridge_avalon_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	motor_controller_core_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                              //        clk.clk
		.reset              (peridot_bridge_reset_reset_bridge_in_reset_reset),           //  clk_reset.reset
		.sink_ready         (peridot_bridge_avalon_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (peridot_bridge_avalon_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (peridot_bridge_avalon_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (peridot_bridge_avalon_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (peridot_bridge_avalon_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (peridot_bridge_avalon_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                       //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                       //           .valid
		.src0_data          (cmd_demux_src0_data),                                        //           .data
		.src0_channel       (cmd_demux_src0_channel),                                     //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                               //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                 //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                       //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                       //           .valid
		.src1_data          (cmd_demux_src1_data),                                        //           .data
		.src1_channel       (cmd_demux_src1_channel),                                     //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                               //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                 //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                       //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                       //           .valid
		.src2_data          (cmd_demux_src2_data),                                        //           .data
		.src2_channel       (cmd_demux_src2_channel),                                     //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                               //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                 //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                       //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                       //           .valid
		.src3_data          (cmd_demux_src3_data),                                        //           .data
		.src3_channel       (cmd_demux_src3_channel),                                     //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                               //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                                 //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                       //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                       //           .valid
		.src4_data          (cmd_demux_src4_data),                                        //           .data
		.src4_channel       (cmd_demux_src4_channel),                                     //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                               //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                                 //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                       //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                       //           .valid
		.src5_data          (cmd_demux_src5_data),                                        //           .data
		.src5_channel       (cmd_demux_src5_channel),                                     //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                               //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                                 //           .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                                       //       src6.ready
		.src6_valid         (cmd_demux_src6_valid),                                       //           .valid
		.src6_data          (cmd_demux_src6_data),                                        //           .data
		.src6_channel       (cmd_demux_src6_channel),                                     //           .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                               //           .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket),                                 //           .endofpacket
		.src7_ready         (cmd_demux_src7_ready),                                       //       src7.ready
		.src7_valid         (cmd_demux_src7_valid),                                       //           .valid
		.src7_data          (cmd_demux_src7_data),                                        //           .data
		.src7_channel       (cmd_demux_src7_channel),                                     //           .channel
		.src7_startofpacket (cmd_demux_src7_startofpacket),                               //           .startofpacket
		.src7_endofpacket   (cmd_demux_src7_endofpacket)                                  //           .endofpacket
	);

	motor_controller_core_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_src_valid),                                //          .valid
		.src_data            (cmd_mux_src_data),                                 //          .data
		.src_channel         (cmd_mux_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                           //          .channel
		.sink0_data          (cmd_demux_src0_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                        //          .endofpacket
	);

	motor_controller_core_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                            //          .valid
		.src_data            (cmd_mux_001_src_data),                             //          .data
		.src_channel         (cmd_mux_001_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                           //          .channel
		.sink0_data          (cmd_demux_src1_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                        //          .endofpacket
	);

	motor_controller_core_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                            //          .valid
		.src_data            (cmd_mux_002_src_data),                             //          .data
		.src_channel         (cmd_mux_002_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                           //          .channel
		.sink0_data          (cmd_demux_src2_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                        //          .endofpacket
	);

	motor_controller_core_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                            //          .valid
		.src_data            (cmd_mux_003_src_data),                             //          .data
		.src_channel         (cmd_mux_003_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                           //          .channel
		.sink0_data          (cmd_demux_src3_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                        //          .endofpacket
	);

	motor_controller_core_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                            //          .valid
		.src_data            (cmd_mux_004_src_data),                             //          .data
		.src_channel         (cmd_mux_004_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                           //          .channel
		.sink0_data          (cmd_demux_src4_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                        //          .endofpacket
	);

	motor_controller_core_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                            //          .valid
		.src_data            (cmd_mux_005_src_data),                             //          .data
		.src_channel         (cmd_mux_005_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                           //          .channel
		.sink0_data          (cmd_demux_src5_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                        //          .endofpacket
	);

	motor_controller_core_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                            //          .valid
		.src_data            (cmd_mux_006_src_data),                             //          .data
		.src_channel         (cmd_mux_006_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                           //          .channel
		.sink0_data          (cmd_demux_src6_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                        //          .endofpacket
	);

	motor_controller_core_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                            //          .valid
		.src_data            (cmd_mux_007_src_data),                             //          .data
		.src_channel         (cmd_mux_007_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                           //          .channel
		.sink0_data          (cmd_demux_src7_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                        //          .endofpacket
	);

	motor_controller_core_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                             //      sink.ready
		.sink_channel       (router_001_src_channel),                           //          .channel
		.sink_data          (router_001_src_data),                              //          .data
		.sink_startofpacket (router_001_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_001_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_src0_data),                              //          .data
		.src0_channel       (rsp_demux_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                        //          .endofpacket
	);

	motor_controller_core_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                             //      sink.ready
		.sink_channel       (router_002_src_channel),                           //          .channel
		.sink_data          (router_002_src_data),                              //          .data
		.sink_startofpacket (router_002_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_002_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_001_src0_data),                          //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                    //          .endofpacket
	);

	motor_controller_core_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                             //      sink.ready
		.sink_channel       (router_003_src_channel),                           //          .channel
		.sink_data          (router_003_src_data),                              //          .data
		.sink_startofpacket (router_003_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_003_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_002_src0_data),                          //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                    //          .endofpacket
	);

	motor_controller_core_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                             //      sink.ready
		.sink_channel       (router_004_src_channel),                           //          .channel
		.sink_data          (router_004_src_data),                              //          .data
		.sink_startofpacket (router_004_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_004_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_003_src0_data),                          //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                    //          .endofpacket
	);

	motor_controller_core_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                             //      sink.ready
		.sink_channel       (router_005_src_channel),                           //          .channel
		.sink_data          (router_005_src_data),                              //          .data
		.sink_startofpacket (router_005_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_005_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_004_src0_data),                          //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                    //          .endofpacket
	);

	motor_controller_core_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                             //      sink.ready
		.sink_channel       (router_006_src_channel),                           //          .channel
		.sink_data          (router_006_src_data),                              //          .data
		.sink_startofpacket (router_006_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_006_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_005_src0_data),                          //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                    //          .endofpacket
	);

	motor_controller_core_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                             //      sink.ready
		.sink_channel       (router_007_src_channel),                           //          .channel
		.sink_data          (router_007_src_data),                              //          .data
		.sink_startofpacket (router_007_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_007_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_006_src0_data),                          //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                    //          .endofpacket
	);

	motor_controller_core_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                             //      sink.ready
		.sink_channel       (router_008_src_channel),                           //          .channel
		.sink_data          (router_008_src_data),                              //          .data
		.sink_startofpacket (router_008_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_008_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_007_src0_data),                          //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                    //          .endofpacket
	);

	motor_controller_core_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (peridot_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                //       src.ready
		.src_valid           (rsp_mux_src_valid),                                //          .valid
		.src_data            (rsp_mux_src_data),                                 //          .data
		.src_channel         (rsp_mux_src_channel),                              //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                             //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                             //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                           //          .channel
		.sink0_data          (rsp_demux_src0_data),                              //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                       //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                         //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                         //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                       //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                          //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                   //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                         //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                         //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                       //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                          //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                   //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                         //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                         //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                       //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                          //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                 //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                   //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                         //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                         //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                       //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                          //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                 //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                   //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                         //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                         //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                       //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                          //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),                 //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket),                   //          .endofpacket
		.sink6_ready         (rsp_demux_006_src0_ready),                         //     sink6.ready
		.sink6_valid         (rsp_demux_006_src0_valid),                         //          .valid
		.sink6_channel       (rsp_demux_006_src0_channel),                       //          .channel
		.sink6_data          (rsp_demux_006_src0_data),                          //          .data
		.sink6_startofpacket (rsp_demux_006_src0_startofpacket),                 //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src0_endofpacket),                   //          .endofpacket
		.sink7_ready         (rsp_demux_007_src0_ready),                         //     sink7.ready
		.sink7_valid         (rsp_demux_007_src0_valid),                         //          .valid
		.sink7_channel       (rsp_demux_007_src0_channel),                       //          .channel
		.sink7_data          (rsp_demux_007_src0_data),                          //          .data
		.sink7_startofpacket (rsp_demux_007_src0_startofpacket),                 //          .startofpacket
		.sink7_endofpacket   (rsp_demux_007_src0_endofpacket)                    //          .endofpacket
	);

endmodule
